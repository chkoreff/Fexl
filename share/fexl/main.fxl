# This parses the script specified on the command line and runs it in the
# standard context.  The standard context includes the functions built into C
# (names starting with "reduce_"), along with more functions written in Fexl
# (see "standard" below).

# Synonyms
\T=C
\no=F

# Comparison
\long_eq = (\x\y order (long_cmp x y) F T F)
\string_eq = (\x\y order (string_cmp x y) F T F)

# I/O

\is_name = (\x type_named "name" (type_eq (type_of x)) F)

\to_string = (\x
	is_string x x;
	is_long x (long_string x);
	is_double x (double_string x);
	is_name x (name_string x);
	x
	)

# (fprint fh x) prints value x to file fh.
\fprint = (\fh\x fwrite fh; to_string x)

\print = (fprint stdout)
\warn = (fprint stderr)

\NL="
"

### Control

\die =
	(\msg
	warn msg; warn NL;
	exit 1;
	)

# The halt function dies with a simple error message, and is useful in corner
# cases that are impossible to handle and should never be reached.
\halt = (die "Halted!")

# (eval f) forces an evaluation of f and returns I.
\eval = (\f query f \_ I)

# Parsing

# (check_parse result context label print good bad)
#
# Check the result of a parse and resolve it in the context.  If there are no
# errors, return (good value), where value is the fully specified value.  If
# there are errors, report them in English using the given print function and
# return bad.  The label is used to identify the source of the parse in error
# messages, but it's omitted if null.

\check_parse =
	(\result\context\label\print\good\bad

	\nl = (print NL)

	# Report an error location.
	\error_at =
		(\line\next
		print " on line ";print line;
		(\next
			string_eq label "" next;
			print " of ";print label;next);
		nl;
		next
		)

	\resolve_symbols ==
		(\ok\exp\symbols\next
		symbols (next ok exp) \entry\symbols
		entry \name\line

		context name
			(\val resolve_symbols ok (exp val) symbols next)
			(
			print "Undefined symbol "; print name; error_at line;
			resolve_symbols F I symbols next
			)
		)

	result \ok\result
	result \exp\symbols

	# Report any syntax error.
	ok ()
		(
		exp \error\line
		long_eq line 0
			(print "Can't open file ";print label;nl;)
			(print error; error_at line;)
		);

	# Resolve any open symbols, applying the expression to their values.
	resolve_symbols ok exp symbols \ok\value
	ok (good value) bad
	)

# Parse the named script file and resolve it in the context.  If there are no
# errors, return the evaluable function denoted by that script in that context.
# If there are errors, report them to stderr and exit with status 1.

\eval_script =
	(\name\context
	check_parse (parse_file name) context name warn I (exit 1)
	)

# Context constructors.  A context is a function which maps a name (string) to
# an optional value, either (yes val) if defined or no if not defined.

# ((define key val next) name) is (yes val) if name equals key, or (next name)
# otherwise.
\define = (\key\val\next \sym string_eq sym key (yes val) (next sym))

# ((starts key inner next) name) is (inner name) if the name starts with key,
# or (next name) otherwise.
\starts = (\key\inner\next
	\sym
	long_eq (string_common sym key) (string_len key) inner next
	sym
	)

# (void name) is always no.
\void = (\name no)

# (chain f g) chains two contexts f and g together.
\chain =
	(\f\g
	\str
	f str yes;
	g str
	)

# This returns a context which includes all the definitions in the given
# context, but also the core definitions built into C.
\wrap_context =
	(\context

	\sym
	query sym \sym  # Force evaluation in case it's a computed symbol.

	# Look in the given context first (if the symbol is a name).
	\def = (is_name sym (context (name_string sym)) no)
	def yes;

	# Otherwise look for a definition built into resolve.c.  This includes
	# built in functions and string, long, and double constants.
	resolve sym
	)

# Given a logical module name, return the full path to its source code.
\full_path =
	(\name
	base_path \path
	string_append path;
	string_append "/share/fexl/";
	string_append name;
	".fxl"
	)

# Read a named module, resolving it in the given context, wrapped to include
# all the built-in definitions.
\module = (\name\context eval_script (full_path name) (wrap_context context))

# Define some stubs which read specific named modules on demand.  This ensures
# that the modules are parsed and resolved only once, even if they are used in
# multiple places.
#[

# This module is a basic context for parsing other modules.
\module_basic =
	(
	define "define" define;
	define "die" die;
	define "halt" halt;
	define "T" T;
	define "no" no;
	define "NL" NL;
	define "print" print;
	define "string_eq" string_eq;
	define "string_put" (fwrite stdout);
	define "warn" warn;
	define "void" void;
	define "?" query;
	void
	)

# Set the current context to basic.
\context = module_basic

# The main module provides definitions defined locally, not in separate files.
\module_main =
	(
	chain context;
	define "chain" chain;
	define "check_parse" check_parse;
	define "eval" eval;
	define "eval_script" eval_script;
	define "fprint" fprint;
	define "getchar" char_get;
	define "is_name" is_name;
	define "putchar" char_put;
	define "starts" starts;
	define "string_stderr" (fwrite stderr);
	define "to_string" to_string;
	void
	)

# Define some modules which can be loaded on demand.
\module_string = (module "string" context)
\module_double = (module "double" context)
\module_math = (module "math" context)
\module_rand = (module "rand" context)
\module_compare = (module "compare" context)
\module_long = (module "long" context)

# Extend the current context.
\context = (chain context module_long)

# Define some modules which can be loaded on demand.
\module_ru_utime = (module "ru_utime" context)
\module_ipc = (module "ipc" context)
\module_list = (module "list" context)

# Extend the current context.
\context = (chain context module_list)

# Define some modules which can be loaded on demand.
\module_run = (module "run" context)
\module_meta = (module "meta" context)
#]

# This function maps a symbol to the module where it is expected to be defined.
# I use "starts" to dispatch on prefixes, enhancing efficiency and conciseness.
\find_module =
	(
	define "+" module_math;
	define "-" module_math;
	define "*" module_math;
	define "/" module_math;
	starts "<" (\_ yes module_compare);
	starts ">" (\_ yes module_compare);
	starts "=" (\_ yes module_compare);
	define "!=" module_compare;
	define "?" module_main;
	starts "a"
		(
		define "all" module_list;
		define "and" module_list;
		define "append" module_list;
		define "args" module_run;
		void
		);
	starts "c"
		(
		define "cmp" module_compare;
		define "compare" module_compare;
		define "check_parse" module_main;
		define "choose" module_list;
		define "chain" module_main;
		void
		);
	starts "d"
		(
		define "default" module_list;
		define "define" module_main;
		define "defined" module_list;
		define "die" module_main;
		define "do" module_list;
		starts "double" (\_ yes module_double);
		void
		);
	starts "e"
		(
		define "end" module_list;
		define "envs" module_run;
		define "eq" module_compare;
		define "eval" module_main;
		define "eval_script" module_main;
		void
		);
	starts "f"
		(
		define "filter" module_list;
		define "find" module_list;
		define "fprint" module_main;
		void
		);
	starts "g"
		(
		define "ge" module_compare;
		define "getchar" module_main;
		define "gt" module_compare;
		void
		);
	define "halt" module_main;
	define "is_name" module_main;
	starts "l"
		(
		define "le" module_compare;
		define "lt" module_compare;
		starts "list" (\_ yes module_list);
		starts "long_" (\_ yes module_long);
		void
		);
	starts "m"
		(
		define "map" module_list;
		define "max" module_compare;
		define "min" module_compare;
		void
		);
	define "NL" module_main;
	starts "n"
		(
		define "ne" module_compare;
		define "no" module_main;
		define "not" module_list;
		void
		);
	define "or" module_list;
	starts "p"
		(
		define "print" module_main;
		define "putchar" module_main;
		void
		);
	define "quote_string" module_meta;
	starts "r"
		(
		define "rand" module_rand;
		define "range" module_list;
		define "reverse" module_list;
		starts "ru_utime" (\_ yes module_ru_utime);
		void
		);
	starts "s"
		(
		define "show" module_meta;
		define "some" module_list;
		define "sort" module_list;
		define "spawn" module_ipc;
		define "starts" module_main;
		starts "string_"
			(
			define "string_put" module_main;
			define "string_stderr" module_main;
			\_ yes module_string
			);
		void
		);
	define "T" module_main;
	starts "t"
		(
		define "to_string" module_main;
		starts "timer" (\_ yes module_ru_utime);
		void
		);
	define "undefined" module_list;
	starts "v"
		(
		define "value_put" module_meta;
		define "value_string" module_meta;
		define "void" module_main;
		void
		);
	define "warn" module_main;
	void
	)

# This is the standard context that resolves symbols in Fexl programs.
\standard ==
	(
	wrap_context
	\str
	find_module str (\module module str);  # Look in module if there is one.
	string_eq str "standard" (yes standard);  # Define standard itself.
	no
	)

# Evaluate the user's script in the standard context.
argv 1 \script
eval_script script standard;
