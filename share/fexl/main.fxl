# This script provides an enhanced context wrapped around another script.

### Boolean functions.

# Define T as a synonym for C.  F is already built-in.
\T=C

\and=(\x\y x y F)
\or=(\x\y x T y)
\not=(\x x F T)

# These functions represent a "possible" value, either (yes val) if you have a
# value or no if you don't.
\yes = (\val \yes\no yes val)
\no  = (     \yes\no no)

# (defined x) is true if x is (yes val).
\defined = (\x x (\_ T) F)
# (undefined x) is true if x is no.
\undefined = (\x not (defined x))

# (default v x) =
#    v   if x is no
#    val if x is (yes val)
\default = (\v\x x I v)

# The halt function ends the evaluation of the current expression by consuming
# all arguments given to it.  It does not halt the entire program.
\halt==(\_ halt)

# (eval f) forces an evaluation of f and returns its value.
\eval = (\f \f=f f)

### Comparison functions

\long_eq=(\x\y long_compare x y F T F)
\string_eq=(\x\y string_compare x y F T F)

### List functions

# Define end as a synonym for C.  The item function is already built-in.
\end=C

# (map f xs) is the list of (f x) values for each x in xs.
\map == (\f\xs xs end \x\xs item (f x) (map f xs))

# Apply function f to each entry in xs, ending with next.  This is useful for
# producing a side-effect for each entry in a list.
\do == (\xs\f\next xs next \x\xs f x; do xs f next)

# (choose xs ys) returns the list of all y in ys where the corresponding x in
# xs is true.  The xs is a list of bits which serves as a "mask".
\choose ==
	(\xs\ys
	xs end \x\xs
	ys end \y\ys
	x (item y) I (choose xs ys)
	)

\list_and = (fold and T)
\list_or = (fold or F)

\all = (\f\xs list_and (map f xs))
\some = (\f\xs list_or (map f xs))

###

\is_name = (\x type_named "name" (type_eq (type_of x)) F)

\to_string = (\x
	is_string x x;
	is_long x (long_string x);
	is_double x (double_string x);
	is_name x (name_string x);
	x)

# (fprint fh x next) prints value x to file fh and continues with next.
#
# In addition to printing atomic values like strings and numbers, it can also
# print whole application trees at once, for example:
#   (("Hello " "world." NL) ("Good " "bye." NL));

\fprint ==
	(\fh\x\next
	\x=x  # Force evaluation.
	is_apply x (\a\b fprint fh a; fprint fh b; next);
	\x = (to_string x)
	is_string x (fwrite fh x; next);
	next
	)

\print = (fprint stdout)
\warn = (fprint stderr)

# LATER move putchar, NL, and die to separate files.

# Synonyms
\putchar = char_put
\getchar = char_get

\NL="
"

\die =
	(\msg
	warn msg; warn NL;
	exit 1;
	)

# Resolve the result of parsing a file, where script is the name of the file,
# result is the return value from parse_file, context is the context for
# resolving undefined symbols, and next is what to do next.
#
# If there are any syntax or undefined symbol errors, it reports them to stderr
# and calls (exit 1).
\resolve_parse =
	(\script\result\context\next
	result \syntax_ok\result result \exp\symbols

	\defs = (map (\entry entry \sym\line context sym) symbols)
	\symbols_ok = (all defined defs)
	\ok = (and syntax_ok symbols_ok)
	\undef_symbols = (choose (map undefined defs) symbols)

	# Now we flatten all the yes/no entries into pure values, using a dummy
	# value of 0 for all no entries.  If we have any no entries we won't run
	# the program anyway, so these dummy values are never encountered anyway.
	\defs = (map (default 0) defs)

	# Now we rip through the list of defs and force an evaluation on each one.
	# This isn't strictly necessary on a functional basis, but it's useful when
	# you use reflective features like type_of, for example in a function such
	# as "show".  By forcing evaluation, a symbol like "C" is evaluated all the
	# way to its ultimate value, instead of lazily remaining as an unevaluated
	# function application.

	do defs (\val \val=val)

	# Now create the program, which is the result of applying exp to each of
	# the definitions in turn.
	\program == (ok (fold I exp defs) exp)

	# Override so we print to stderr instead of stdout.
	\print = warn
	\nl = (warn "
")

	# Report the error location.
	\error_at =
		(\line\next
		print " on line ";print line;print " of ";print script;nl;
		next
		)

	# Report any syntax error.
	syntax_ok ()
		(
		exp \error\line
		print error; error_at line;
		);

	# Report any undefined symbols.
	do undef_symbols
		(\sym
		sym \sym\line
		print "Undefined symbol "; print sym; error_at line;
		);

	# Run the program if it's ok, otherwise exit.
	ok program (exit 1);
	next
	)

# Parse the module file with the given logical name.  This returns a value
# which, when applied to a context, returns the fully resolved function
# described in that file.
\module =
	(\name
	base_path \path
	\script =
		(
		string_append path;
		string_append "/share/fexl/";
		string_append name;
		".fxl"
		)
	parse_file script \result
	resolve_parse script result
	)

# This wrapper caches the known module names so it never has to parse a file
# more than once.
\module =
	(
	\str
	string_eq str "a" (eval; module "a");
	string_eq str "compare" (eval; module "compare");
	string_eq str "double" (eval; module "double");
	string_eq str "ipc" (eval; module "ipc");
	string_eq str "list" (eval; module "list");
	string_eq str "long" (eval; module "long");
	string_eq str "math" (eval; module "math");
	string_eq str "meta" (eval; module "meta");
	string_eq str "m" (eval; module "m");
	string_eq str "rand" (eval; module "rand");
	string_eq str "r" (eval; module "r");
	string_eq str "ru_utime" (eval; module "ru_utime");
	string_eq str "run" (eval; module "run");
	string_eq str "s" (eval; module "s");
	string_eq str "string" (eval; module "string");
	string_eq str "v" (eval; module "v");
	module str
	)

# Context combinators

\void = (\key no)
\define = (\key\val\next \sym string_eq sym key (yes val) (next sym))
\starts = (\key\inner\next
	\sym
	long_eq (string_common sym key) (string_len key) inner next
	sym
	)

# Define an enhanced context in terms of the given standard context.
\enhance =
	(\standard
	# Parse the module file in the standard context.
	\see = (\file module file standard)

	starts "<" (see "compare");
	starts "=" (see "compare");
	starts ">" (see "compare");
	starts "-" (see "math");
	starts "!=" (see "compare");
	define "?" query;
	starts "/" (see "math");
	starts "*" (see "math");
	starts "+" (see "math");
	starts "a"
		(
		define "all" all;
		define "and" and;
		see "a"
		);
	starts "c"
		(
		define "choose" choose;
		starts "compare" (see "compare");
		void
		);
	starts "d"
		(
		define "default" default;
		define "define" define;
		define "defined" defined;
		define "die" die;
		define "do" do;
		starts "double_" (see "double");
		void
		);
	starts "e"
		(
		define "end" end;
		starts "envs" (see "run");
		define "eval" eval;
		void
		);
	starts "f"
		(
		starts "filter" (see "list");
		starts "find" (see "list");
		define "fprint" fprint;
		void
		);
	define "getchar" getchar;
	define "halt" halt;
	define "is_name" is_name;
	starts "l"
		(
		starts "list"
			(
			define "list_and" list_and;
			define "list_or" list_or;
			see "list"
			);
		starts "long_" (see "long");
		void
		);
	starts "m"
		(
		define "map" map;
		see "m"
		);
	define "NL" NL;
	starts "n"
		(
		define "no" no;
		define "not" not;
		void
		);
	define "or" or;
	define "print" print;
	define "putchar" putchar;
	starts "quote_string" (see "meta");
	starts "r" (see "r");
	starts "s"
		(
		define "see" see;
		define "standard" standard;
		define "starts" starts;
		define "some" some;
		see "s"
		);
	define "T" T;
	starts "timer_" (see "ru_utime");
	define "to_string" to_string;
	define "undefined" undefined;
	starts "v"
		(
		define "void" void;
		see "v"
		);
	define "warn" warn;
	define "yes" yes;
	void
	)

# This is the standard context which resolve symbols in Fexl programs.
\standard ==
	(\sym
	\sym=sym  # Force evaluation in case it's a computed symbol.
	is_name sym
		(
		# Look for a definition built into resolve.c.
		resolve sym yes;
		# We didn't find one there, so look through the enhancements.
		enhance standard (name_string sym)
		);
	is_string sym (yes sym);  # Treat strings literally.
	no  # It's not a name or a string, so it's undefined.
	)

# Run the user's script in the standard context.
argv 1 \script
parse_file script \result
resolve_parse script result standard;
