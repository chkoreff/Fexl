# Functions for boolean, optional, and list values.

### Boolean
\and=(\x\y x y F)
\or=(\x\y x T y)
\not=(\x x F T)

### Optional

# (defined x) is true if x is (yes val).
\defined = (\x x (\_ T) F)
# (undefined x) is true if x is no.
\undefined = (\x not (defined x))

# (default v x) =
#    v   if x is no
#    val if x is (yes val)
\default = (\v\x x I v)

### List

# Define end as a synonym for C.  The item function is already built-in.
\end=C

\append == (\xs\ys xs ys \x\xs item x; append xs ys)

# Push all entries in list xs onto list ys.
\push_all==(\xs\ys xs ys \x\xs push_all xs (item x ys))

# Reverse list xs.
\reverse=(\xs push_all xs end)

# (filter f xs) filters the list xs with function f, only returning the entries
# for which (f x) is true.
\filter == (\f\xs xs end \x\xs f x (item x) I; filter f xs)

# (find f xs) finds the first x in the list xs for which (f x) is true.
# It returns (yes x) if such an x was found, otherwise no.
\find == (\f\xs xs no \x\xs f x (yes x); find f xs)

# (sort keep compare xs) sorts the list xs using the three-way comparison
# function.  It keeps duplicates if the keep flag is true, otherwise it
# discards them and returns only the unique entries.
\sort ==
	(\keep\compare\xs
	xs end \x\xs

	\lo = (filter (\y compare y x T F F) xs)
	\hi = (filter (\y compare y x F keep T) xs)

	append (sort keep compare lo);
	item x;
	sort keep compare hi
	)

# Return the list of long values in the range x through y.  It works forwards
# or backwards.
\range ==
	(\x\y
	item x;
	long_compare x y
		(range (long_add x 1) y)
		end
		(range (long_sub x 1) y)
	)

# (list_long x) is the list of all long values starting with x.
\list_long == (\x item x; \x=(long_add x 1) list_long x)

# Return the first N items of the list.
\list_prefix == (\list\N
	long_le N 0 end;
	list end \head\tail
	\N = (long_sub N 1)
	item head; list_prefix tail N
	)

# Return the possible entry at position n in list xs.
\list_entry == (\xs\n
	xs no \x\xs
	long_compare n 0 no (yes x)
	\n = (long_sub n 1)
	list_entry xs n
	)

# Return the entry at position n in list xs, or v if no such position.
\list_at = (\xs\n\v list_entry xs n I v)

\list_and = (fold and T)
\list_or = (fold or F)

# (map f xs) is the list of (f x) values for each x in xs.
\map == (\f\xs xs end \x\xs item (f x) (map f xs))

\all = (\f\xs list_and (map f xs))
\some = (\f\xs list_or (map f xs))

# Apply function f to each entry in xs, ending with next.  This is useful for
# producing a side-effect for each entry in a list.
\do == (\xs\f\next xs next \x\xs f x; do xs f next)

# (choose xs ys) returns the list of all y in ys where the corresponding x in
# xs is true.  The xs is a list of bits which serves as a "mask".
\choose ==
	(\xs\ys
	xs end \x\xs
	ys end \y\ys
	x (item y) I (choose xs ys)
	)

define "end" end;
define "append" append;
define "reverse" reverse;
define "sort" sort;
define "and" and;
define "or" or;
define "not" not;
define "list_prefix" list_prefix;
define "list_at" list_at;
define "list_entry" list_entry;
define "list_long" list_long;
define "filter" filter;
define "find" find;
define "range" range;
define "list_and" list_and;
define "list_or" list_or;
define "all" all;
define "some" some;
define "map" map;
define "do" do;
define "choose" choose;
define "defined" defined;
define "undefined" undefined;
define "default" default;
void
