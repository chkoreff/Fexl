#
# TODO
Use "test/common.fxl" \\

## Define test routines

# Test parsing an auxiliary file, multiple times to grab each part after the
# "\\" separately.
\test_parse=
(
# Here we take the trouble to model a "stream" object which contains the
# file handle, name, and line number.

\parse_stream =
	(\stream
	stream \fh\name\line
	parse_stream fh source_context name line \exp\line
	\stream=(\: : fh name line)
	\: : exp stream
	)

\curr_line =
	(\stream
	stream \_\_\line
	line
	)

\parse=
	(\stream
	parse_stream stream \exp\stream
	exp
	say ["  at line " (curr_line stream)]
	\: : stream
	)

\fopen=(\name\mode
	fopen name mode (die ["Could not open " name]) \fh\_
	fh)

\name==(string_append base_path "test/a3_1.fxl")
\fh==(fopen name "r")
\line==(say "Initialize line number." + 1 0)
\stream=(\: : fh name line)

parse stream \stream
parse stream \stream
parse stream \stream
)

# Example of reporting an arbitrarily complex result in an extensible way.
\test_report=
(
\test_report=
	(\result
	\is_list=(\x \x==x is_end x T; is_item x (\_\_ T); F)
	not (is_list result) (say "Not a list");
	result (say "No result") \status\result
	string_eq status "ok"
		(
		say (result "Missing value" \value\_ ["Value is " value])
		);
	print "Error: "
	string_eq status "device busy"
		(
		say ["Device was busy" (result [] \time\_ [" for "time" seconds"])]
		);
	string_eq status "unknown device"
		(
		say ["Unknown device" (result [] \id\_ [" id "id])]
		);
	say status
	)

test_report ["ok" 12]
test_report ["ok"]
test_report "x"
test_report []
test_report ["error"]
test_report ["foobar"]
test_report ["device busy"]
test_report ["device busy" 45]
test_report ["unknown device"]
test_report ["unknown device" 77]
)

# Example of validating a complex piece of data with good error messages.
\test_event=
(
\event=["trade" 100 "XYZ" -12408.95 "USD" 124 8.95]
#\event=["trade" 100 "XYZ" -12408.95 "USD" 124]

event () \verb\args

\shift=
	(\args\pattern\next

	\missing=
		(\field
		say ["Missing " field " on " verb]
		say "You don't have the right number of words on this command:"
		say ["  " (join " " event)]
		say "The correct format is:"
		say ["  " (join " " [verb;pattern])]
		)

	\shift=
		(@\shift\args\labels\next
		labels (next args) \label\labels
		args (missing label) \arg\args
		shift args labels (next arg)
		)

	shift args pattern next
	)

\case=(string_eq verb)
case "trade"
	(
	shift args ["quantity" "symbol" "amount" "currency" "price" "commission"]
	\qty\symbol\amount\currency\price\commission\args
	say ["We have: "
		(join " " [verb qty symbol amount currency price commission])]
	args (say "That's all") \_\_ say "There's more"
	);
say ["Unknown verb " verb]
)

# Test some repeated side effects.
\test_ping=
(
\ping=(print "ping!")

\x=(+ (ping 3) (ping 4))

print "Press any key and then press enter: "
\ch=97 nl  # simulate entering 'a'
#\ch==getchar
say ["hello x = " x " ch = " ch]
say ["hello x = " x " ch = " ch]

\x=(ping 3)
#\x=3

\talk=(say x)

talk
talk
)

## Call the test routines.
test_parse
test_report
test_event
test_ping
