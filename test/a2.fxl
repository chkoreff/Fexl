#
# TODO
Use "test/common.fxl" \\

## Define test routines

\test_nat_math =
(
announce "test_nat_math"

# Convert atom or list to a string.

# (nat b n) is the natural number b + 2*n, where b is a bit and n is a natural
# number.
\nat = (\b\n b [T;n]; n [] \_\_ [F;n])

# (nat_eq0 x) is true iff x = 0
\nat_eq0=(\x x T \_\_ F)

# (nat_inc x) is x+1.  (x incremented by 1).  Both x and the result are of
# type nat.
\nat_inc=(@\nat_inc\x x [T] \b\n b [F; nat_inc n] [T;n])

\bits = (map \b b "1" "0")

# (nat_add x y) is x+y, the sum of x and y.
\nat_add=
	(@\nat_add\x\y
	x y \bx\nx
	y x \by\ny
	\sum==(nat_add nx ny)
	bx
		(by [F;nat_inc sum] [T;sum])
		[by;sum]
	)

# (nat_mul x y) is x*y, the product of x and y.
\nat_mul=
	(@\nat_mul\x\y
	x [] \bx\nx
	y [] \by\ny
	bx
		(by
			[T; nat_add nx; nat_mul ny x]
			[F; nat_mul ny x])
		(by
			[F; nat_mul nx y]
			[F F; nat_mul nx ny])
	)

\nat_0 = []

# Decrement x, returning:
#   no        # if x = 0
#   yes d     # if x > 0 and d = x - 1
\nat_dec_clip=
	(@\nat_dec_clip\x
	x no \bx\nx
	bx
		(yes (nat F nx))
		(nat_dec_clip nx no \d yes (nat T d))
	)

# Subtract x minus y, returning:
#   no        # if x < y
#   yes d     # if x >= y and d = x - y
\nat_sub_clip=
	(@\nat_sub_clip\x\y
	x (y (yes nat_0) \_\_ no) \bx\nx
	y (yes x) \by\ny

	nat_sub_clip nx ny no \d
	bx
		(yes (nat (by F T) d))
		(by
			(nat_dec_clip (nat F d))
			(yes (nat F d))
		)
	)

# (div x y) divides x by y, returning the quotient q and remainder r which
# satisfy: x = q*y + r and 0 <= r < y.  Or if y=0, the function returns q=0 and
# r=0.
\nat_div=
	(@\nat_div\x\y
	x (pair nat_0 nat_0) \bx\nx
	y (pair nat_0 nat_0) \by\ny
	by
		(
		# divide by odd
		nat_div nx y \q\r
		\r==(nat bx r)
		nat_sub_clip r y
			(pair (nat F q) r)
			(\z pair (nat T q) z)
		)
		(
		# divide by even
		nat_div nx ny \q\r
		pair q (nat bx r)
		)
	)

# Show digits in binary.
\digits=bits

# Show the length in front of each number.
\digits=
	(\x
	\xs==(digits x)
	[ "[" (length xs) "] " (bits x) ]
	)

\try_mul =
	(\x\y
	\z == (nat_mul x y)

	print
	[
	"mul" NL
	"x = " (digits x) NL
	"y = " (digits y) NL
	"z = " (digits z) NL
	]
	)

\try_div =
	(\x\y
	nat_div x y \q\r

	print
	[
	"div" NL
	"x = " (digits x) NL
	"y = " (digits y) NL
	"q = " (digits q) NL
	"r = " (digits r) NL
	]
	)

#\x = [T] # 1
#\y = [F T] # 2

#\x = [F T] # 2
#\y = [F T] # 2

#\x = [T F T F F T]  # 37
#\y = [T F T T] # 13
# 100001111 is 481 = 37*13

\nat_31 = [T T T T T]
\nat_19 = [T T F F T]
\nat_17 = [T F F F T]
\nat_10 = [F T F T]

#\z = (nat_add x y)
try_mul [F T] [F T] # 2 * 2
try_mul [T F T F F T] [T F T T] # 37 * 13
try_div [T F T F F T] [T F T T] # 37 / 13

\churn = (\x nat_add nat_17; nat_mul x x)

\x == (nat_mul nat_31 nat_19)

\x==(churn x)
\x==(churn x)
\x==(churn x)
\x==(churn x)
\x==(churn x)
\x==(churn x)

\y==nat_10
\y==(nat_mul y y)

try_div x y

\x==(churn x)

\y==(churn y)
\y==(churn y)
\y==(churn y)
\y==(churn y)
\y==(churn y)
\y==(churn y)

try_div x y
)

##

test_nat_math
