#!/bin/sh

# Build and install the program as required.  To see the usage options, run
# "./build help".

# Return true if file_1 is newer than file_2.
newer_than()
	{
	file_1=$1
	file_2=$2

	out_of_date=0
	if [ -e $file_2 ]
	then
		if [ $file_1 -nt $file_2 ]
		then
			out_of_date=1
		fi
	else
		out_of_date=1
	fi
	echo $out_of_date
	}

# Compile the .c file if any of the sources are newer than the .o file.
compile()
	{
	file_o=$1
	file_c=$2
	shift

	for source in $@
	do
		out_of_date=`newer_than $source $file_o`
		if [ $out_of_date -eq 1 ]
		then
			compile_command="$compile $file_c -o $file_o"
			if [ $quiet -eq 0 ]; then echo $compile_command ; fi
			$compile_command
			code=$?
			if test $code -ne 0; then exit $code ; fi
			break
		fi
	done
	}

# Link all the object files together to produce the target executable.  This
# only happens if any object file is newer than the target.
link()
	{
	target=$1
	shift

	out_of_date=0
	for file_o in $@
	do
		out_of_date=`newer_than $file_o $target`
		if [ $out_of_date -ne 0 ]
		then
			break
		fi
	done

	if [ $out_of_date -ne 0 ]
	then
		link_command=$link

		for file_o in $@
		do
			link_command="$link_command $file_o"
		done

		link_command="$link_command -o $target"

		if [ $quiet -eq 0 ]; then echo $link_command ; fi
		$link_command
		code=$?
		if test $code -ne 0; then exit $code ; fi
	fi
	}

install()
	{
	if [ "$verb" = "install" ]
	then
		local_bin=$1
		final_bin=$2

		if [ `newer_than $local_bin $final_bin` -ne 0 ]
		then
			sudo cp -p $local_bin $final_bin
			sudo chown root $final_bin
			sudo chgrp root $final_bin
		fi
	fi
	}

handle_options()
	{
	verb=$1

	install_location="/usr/bin"

	# I use -O3 because that enables -finline-functions.  You can see that by
	# running "gcc -c -Q -O3 --help=optimizers".
	compile="gcc -c -Wall -Werror -ansi -O3"
	link="gcc"

	obj=../obj
	bin=../bin

	# Check the command line.

	valid=0
	quiet=0

	if [ "$verb" = "help" ]
	then
	progname=./build
	cat <<EOM
NAME
       $progname - build a C program

SYNOPSIS
       $progname [quiet] [clean] [refresh] [install]
       $progname erase

DESCRIPTION

       $progname
              Only compile what actually changed.

       $progname clean
              Compile everything from scratch.

       $progname install
              Install the program in the $install_location directory.

       $progname quiet
              Build quietly, without showing the commands that it runs.

       $progname erase
              Erase all the output files and don't build anything.

       $progname refresh
              Refresh the build script, analyzing the program structure again.
              This is useful when you've changed the program structure by
              adding or deleting files or creating new header dependencies.
              You could use the "clean" option instead, but this is faster.

       You may also combine the options in various ways such as this:

       $progname quiet clean install

EOM
	exit
	fi

	if [ "$verb" = "quiet" ]
	then
		quiet=1
		shift
		verb=$1
	fi

	if [ "$verb" = "clean" -o "$verb" = "erase" ]
	then
		# I don't use $obj and $bin here because that would be dangerous if I
		# made a mistake setting them above.
		rm -rf ../obj
		rm -rf ../bin

		if [ "$verb" = "erase" ]; then exit ; fi
		shift
		verb=$1
	fi

	if [ "$verb" = "refresh" ]
	then
		rm -f ../obj/build
		shift
		verb=$1
	fi

	if [ "$verb" = "" ]
	then
		valid=1
	fi

	if [ "$verb" = "install" ]
	then
		valid=1
	fi

	if [ $valid -ne 1 ]
	then
		echo "Unknown verb '$verb'"
		exit 2
	fi

	mkdir -p $obj
	mkdir -p $bin
	}

build_program()
	{
	if [ ! -e $obj/build ]
	then
		main_c=`grep -l "^int main(" *.c | head -1`
		if [ "$main_c" = "" ]
		then
			echo "I don't see a main program here."
			exit 2
		fi

		target=`basename $main_c .c`

		objects=""

		for file_c in *.c
		do
			base=`basename $file_c .c`
			file_o=$obj/$base.o

			objects="$objects$file_o "

			grep -e "^#include \".*\"$" $file_c |
			sed "s/^#include \"\(.*\)\"/\1/" |
			(
			headers=""
			while read file_h ; do
				headers="$headers$file_h "
			done
			echo "compile $file_o $file_c $headers" >>$obj/build
			)
		done

		echo "link $bin/$target $objects" >>$obj/build
		echo "install $bin/$target $install_location/$target" >>$obj/build

		chmod +x $obj/build
	fi

	script=`cat $obj/build`
	eval "$script"
	}

handle_options $@
build_program
