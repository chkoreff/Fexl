# Append lists xs and ys.
\append=
	(\xs\ys
	(@\loop\xs
	xs ys \x\xs
	\tail=(once; loop xs)
	[x;tail]
	)
	xs
	)

# Do f for each item in list xs.
\each=
	(\xs\f
	(@\loop\xs xs () \x\xs f x loop xs)
	xs
	)

# Apply f to each element in list xs.
\map=
	(\f @\loop \xs
	xs [] \x\xs
	\x=(f x)
	\tail=(once; loop xs)
	[x;tail]
	)

# Apply f to each element in list xs, but only keep the good results.
\map_good=
	(\fn @\loop \xs
	xs [] \x\xs
	\y=(fn x)
	\tail=(once; loop xs)
	is_good y (cons y) ();
	tail
	)

# (filter f xs) is the list of items x in xs for which (f x) is true.
\filter=
	(\f @\loop \xs
	xs [] \x\xs
	\tail=(once; loop xs)
	f x [x;tail] tail
	)

# Reverse list xs.
\reverse=
	(\xs
	# Push all entries in list xs onto list ys.
	(@\loop\xs\ys xs ys \x\xs loop xs [x;ys])
	xs []
	)

# Append a list of lists together.
\append_all=
	(@\loop\list
	list [] \top\list
	append top;
	loop list
	)

# (g_sort lt eq gt unique xs) Generic sort routine.
# This returns the ordered list of elements in xs.  Elements in the list are
# compared with the lt, eq, and gt functions.  Duplicate elements are discarded
# if unique is true.
\g_sort=
	(\lt\eq\gt\unique @\sort \xs
	xs [] \x\xs

	\ltx=(filter (gt x) xs)
	\eqx=(filter (eq x) xs)
	\gtx=(filter (lt x) xs)

	append (sort ltx);
	cons x;
	unique () (append eqx);
	sort gtx
	)

# The sort and unique functions operate on lists whose elements are all either
# strings or numbers.
\sort_normal=(g_sort lt eq gt)

\unique=(sort_normal T)
\sort=(sort_normal F)

# Using function f and starting value z, run the function forward for each
# element in the list.
\fold=
	(\f @\loop \z\xs
	xs z \x\xs
	\z=(f z x)
	loop z xs
	)

# Return the first n items of a list.
\first=
	(@\loop\n\xs
	\n=n
	le n 0 [];
	xs [] \x\xs
	[x;loop (- n 1) xs]
	)

# (skip n xs) Skip the first n items in list xs.
\skip=
	(@\loop\n\xs
	\n=n
	le n 0 xs;
	xs [] \x\xs
	loop (- n 1) xs
	)

\list_sum=(fold + 0)
\list_length=(fold (\n\_ + 1 n) 0)

# Produce the list of values in the range x through y.
\range=
	(\x\y
	\x=(round x)
	\y=(round y)
	\d=(le x y 1 -1)
	(@\loop\x
	cons x;
	eq x y [];
	\x=(+ x d)
	loop x
	) x
	)

# (list_at xs n) is the item at position n in list xs, counting from 0.
\list_at=
	(@\loop\xs\n
	xs void \x\xs
	\n=n
	lt n 0 void;
	eq n 0 x;
	loop xs (- n 1)
	)

# Combine the elements of two lists pairwise.
\list_combine=
	(\f @\loop\xs\ys
	xs ys \x\xt
	ys xs \y\yt
	\z=(f x y)
	cons z (loop xt yt)
	)

# Get the nth column of a table.
\column=(\n\xs map (\row list_at row n) xs)

# Shift the first item off a list.
\shift=(\xs xs {void []} \x\xs {x xs})

# Return an object where the key is redefined as val.
\with=
	(\key\val\obj
	\obj=obj
	\x
	eq x key val;
	obj x
	)

\put_key=with  # deprecated

# Given a list of rows, return a function which maps the key at key_pos to the
# value at val_pos.
\match_column=
	(\key_pos\val_pos @\loop \rows
	rows void \row\rows

	\key=(list_at row key_pos)
	\val=(list_at row val_pos)

	with key val;
	loop rows
	)

# (stream_values fn) is the infinite list of values of function fn.  This is
# useful for generating streams of random values.
\stream_values=
	(\fn @\loop
	\x=(once fn)
	\xs=(once loop)
	[x;xs]
	)

# Gather input items into a list.
\get_list=
	(\get @\loop
	\x=get
	is_void x [];
	cons x; loop
	)

# Flatten a piece of data (string, number, or list) into a string.
\to_str=
	(\x
	\buf=buf_new
	\put=(buf_put buf)
	(@\loop\x
	\x=x
	is_str x (put x);
	is_num x (put (num_str x));
	is_list x
		(
		x () \x\xs
		loop x
		loop xs
		);
	) x
	buf_get buf
	)

# Gather input strings into a string.
\get_str=
	(\get
	\buf=buf_new
	(@\loop
	\x=get
	is_void x ();
	buf_put buf x
	loop
	)
	buf_get buf
	)

# Gather a list of strings into a string.
\list_str=
	(\xs
	\buf=buf_new
	(@\loop\xs
	xs () \x\xs
	buf_put buf x
	loop xs
	)
	xs
	buf_get buf
	)

# Convert a string to a list with a given function.
\get_str_list=
	(\get\str
	\in=(readstr str)
	get_list (get in)
	)

# Return the list of individual bytes in a string.
\str_bytes=(get_str_list sgetc)

# Return the list of UTF-8 characters in a string.
\str_chars=(get_str_list sget)

# Apply a function to each logical character of a string.
\str_map=(\f\str list_str; map f; str_chars str)

# Insert separators between elements of a list.
\join=
	(\sep\xs
	to_str;
	(
	@\loop\slash\xs
	xs [] \x\xs
	slash (cons sep) ();
	cons x;
	loop T xs
	) F xs

	)

\join_path=(join "/")

\split=
	(\sep\str
	\len_sep=(length sep)
	eq len_sep 0 [str];

	(@\loop\offset
	\pos=(search str sep offset)
	is_void pos
		(
		\len_str=(length str)
		\top=(slice str offset (- len_str offset))
		[top]
		);

	\top=(slice str offset (- pos offset))
	cons top;
	\pos=(+ pos len_sep)
	loop pos
	) 0
	)

\form
define "append" append;
define "each" each;
define "map" map;
define "map_good" map_good;
define "filter" filter;
define "reverse" reverse;
define "append_all" append_all;
define "g_sort" g_sort;
define "unique" unique;
define "sort" sort;
define "fold" fold;
define "first" first;
define "skip" skip;
define "list_sum" list_sum;
define "list_length" list_length;
define "range" range;
define "list_at" list_at;
define "list_combine" list_combine;
define "column" column;
define "shift" shift;
define "with" with;
define "put_key" put_key;
define "match_column" match_column;
define "stream_values" stream_values;
define "get_list" get_list;
define "to_str" to_str;
define "get_str" get_str;
define "list_str" list_str;
define "str_bytes" str_bytes;
define "str_chars" str_chars;
define "str_map" str_map;
define "join" join;
define "join_path" join_path;
define "split" split;
form
