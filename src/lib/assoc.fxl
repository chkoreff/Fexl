# (Sat 2018-07-28 In memoriam, Charlie the cat, thank you little friend.)

\get_key=
	(\key @\loop \list
	list void \pair\list
	pair \this_key\this_val
	eq key this_key this_val;
	loop list
	)

\del_key=
	(\key @\loop \list
	list [] \pair\list
	pair \this_key\this_val
	eq key this_key list;
	\list=(loop list)
	[pair;list]
	)

\put_key=
	(\key\val
	\val=val
	@\loop \list
	list [{key val}] \pair\list
	pair \this_key\this_val
	eq key this_key [{this_key val};list];
	\list=(loop list)
	[pair;list]
	)

\push_key=
	(\key\val\list
	\val=val
	\list=list
	[{key val};list]
	)

\update_key=
	(\key\update @\loop \list
	list
		(
		\val=(update void)
		[{key val}]
		)
	\pair\list
	pair \this_key\this_val
	eq key this_key
		(
		\val=(update this_val)
		[{this_key val};list]
		);
	\list=(loop list)
	[pair;list]
	)

\add_key=
	(\key\val
	update_key key (\total is_defined total (+ total val) val)
	)

\update_values=
	(\update
	map
		(\pair
		pair \key\val
		\val=(update key val)
		{key val}
		)
	)

# (sort_pairs list) Sort the list of pairs by key.
\sort_pairs=(sort_all (\p p \k\_ k))

\put_default=
	(\key\dval\list
	\val=(get_key key list)
	is_defined val list;
	[{key dval};list]
	)

\name_columns=
	(@\loop\keys\vals
	keys [] \key\keys
	vals [] \val\vals
	\tail=(loop keys vals)
	[{key val};tail]
	)

\make_assoc=
	(\extract\xs
	\xs=(map (\x \k=(extract x) {k x}) xs)
	combine_keys (\x\_ x) xs # Keep the first.
	)

\form
def ":" get_key; # Handy synonym
def "get_key" get_key;
def "del_key" del_key;
def "put_key" put_key;
def "push_key" push_key;
def "update_key" update_key;
def "add_key" add_key;
def "update_values" update_values;
def "sort_pairs" sort_pairs;
def "put_default" put_default;
def "name_columns" name_columns;
def "make_assoc" make_assoc;
form
