#
# Repeat string x n times
\repeat_str=
	(\x
	\buf=buf_new
	@\loop \n
	\n=n
	le n 0 (buf_get buf);
	buf_put buf x
	loop (- n 1)
	)

\format_num=
(
# Split string x into groups of three with the given separator.
\split3=
	(\sep @\loop \x
	\x=x
	\len=(length x)
	le len 3 x
	\pos=(- len 3)
	\prefix=(slice x 0 pos)
	\suffix=(slice x pos 3)
	. (loop prefix) (. sep suffix)
	)

# Format number x to n decimal places, with an optional separator for the
# integer part.
\format_num=
	(\n\sep\x
	# Get the list of all digits without the decimal point.
	\n=n
	\x=x
	\factor=(^ 10 n)
	\digits=(num_str; round; * factor (abs x))

	# Pad 0s on the front as needed.
	\pad=(repeat_str "0" (+ 1 (- n (length digits))))
	\digits=(. pad digits)

	# Extract integer and fractional part.
	\pos=(- (length digits) n)
	\xi=(slice digits 0 pos)
	\xf=(slice digits pos n)

	# Insert separator if desired.
	\xi=(eq sep "" xi (split3 sep xi))

	# Put a "." in front of any fractional part.
	\xf=(eq xf "" "" (. "." xf))
	# Determine the sign of result.
	\sign=(lt x 0 "-" "")

	\result=(. sign; . xi xf)
	result
	)
format_num
)

\format_money=(format_num 2 ",")

# Quote a string, enclosing it within terminators to make it suitable for
# reading as a Fexl string.
\fexl_quote=
	(\x
	\x=x
	\term=
		(
		\check=(\y is_void (search x y 0) y)
		check QU;
		(@\loop\count
		\term=(. "~"; num_str count)
		check term;
		\count=(+ count 1)
		loop count
		) 1
		)
	. term; . (eq term QU "" " "); . x; term
	)

# Convert string to upper-case.  Only works with ASCII characters though.
# LATER 20160331 Make it work with full utf8.
\uc=
	(
	str_map \ch
	\n=(ord ch)
	and (ge n 97) (le n 122) (chr; - n 32) ;
	ch
	)

# Convert string to lower-case.
\lc=
	(
	str_map \ch
	\n=(ord ch)
	and (ge n 65) (le n 90) (chr; + n 32) ;
	ch
	)

\nearly_zero=(\x lt (abs x) 1e-8)

\render_data=
	(\put
	@\put_data\x
	\x=x
	is_str x (put (fexl_quote x));
	is_num x (put (nearly_zero x "0" (num_str x)));
	is_tuple x
		(
		put "{"

		(@\loop\space\xs
		split_tuple xs () \xs\x
		loop T xs
		put_data x
		if space (put " ")
		) F x

		put "}"
		);
	is_list x
		(
		put "["

		(@\loop\space\xs
		xs () \x\xs
		if space (put " ")
		put_data x
		loop T xs
		) F x

		put "]"
		);
	is_bool x (put (x "T" "F"));
	is_void x (put "void");
	put "()"
	)

\render_list=
	(\put\xs
	\xs=xs

	\nl==(put NL)
	\say=(\x put x nl)
	\put_data=(render_data put)

	not (is_list xs) (put_data xs nl);

	say "["
	each xs (\x put_data x nl)
	say "]"
	)

\fput_data=(\fh \put=(fput fh) render_data put)
\fput_list=(\fh \put=(fput fh) render_list put)

\put_data=(fput_data stdout)
\put_list=(fput_list stdout)

\show_data=(\label\x put [label" "] put_data x nl)

\data_to_str=
	(\data
	\buf=buf_new
	\put=(buf_put buf)
	render_data put data
	buf_get buf
	)

\str_to_data=
	(\str
	evaluate
		(
		define "T" T;
		define "F" F;
		define "void" void;
		str_num
		);
	parse str ""
	)

# Trim all spaces at the end of the string.  A space is defined as any ASCII
# character less than or equal to the space character, which includes all
# control characters.
\trim_end_spaces=
	(\text
	\text=text
	\pos=(- (length text) 1)
	(@\loop\pos
	lt pos 0 "";
	\ch=(slice text pos 1)
	\is_space=(le ch " ")
	is_space
		(
		\pos=(- pos 1)
		loop pos
		)
		(
		\len=(+ pos 1)
		slice text 0 len
		)
	) pos
	)

define "repeat_str" repeat_str;
define "format_num" format_num;
define "format_money" format_money;
define "fexl_quote" fexl_quote;
define "uc" uc;
define "lc" lc;
define "render_data" render_data;
define "render_list" render_list;
define "fput_data" fput_data;
define "fput_list" fput_list;
define "put_data" put_data;
define "put_list" put_list;
define "show_data" show_data;
define "as_str" data_to_str; # handy synonym
define "data_to_str" data_to_str;
define "str_to_data" str_to_data;
define "trim_end_spaces" trim_end_spaces;
standard
