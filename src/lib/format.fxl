# Repeat string x n times
\repeat_str=
	(\x
	\buf=buf_new
	@\loop \n
	\n=n
	le n 0 (buf_get buf);
	buf_put buf x
	loop (- n 1)
	)

\format_num=
(
# Split string x into groups of three with the given separator.
\split3=
	(\sep @\loop \x
	\x=x
	\len=(length x)
	le len 3 x
	\pos=(- len 3)
	\prefix=(slice x 0 pos)
	\suffix=(slice x pos 3)
	. (loop prefix) (. sep suffix)
	)

# Format number x to n decimal places, with an optional separator for the
# integer part.
\format_num=
	(\n\sep\x
	# Get the list of all digits without the decimal point.
	\n=n
	\x=x
	\factor=(^ 10 n)
	\digits=(num_str; round; * factor (abs x))

	# Pad 0s on the front as needed.
	\pad=(repeat_str "0" (+ 1 (- n (length digits))))
	\digits=(. pad digits)

	# Extract integer and fractional part.
	\pos=(- (length digits) n)
	\xi=(slice digits 0 pos)
	\xf=(slice digits pos n)

	# Insert separator if desired.
	\xi=(eq sep "" xi (split3 sep xi))

	# Put a "." in front of any fractional part.
	\xf=(eq xf "" "" (. "." xf))
	# Determine the sign of result.
	\sign=(lt x 0 "-" "")

	\result=(. sign; . xi xf)
	result
	)
format_num
)

\format_money=(format_num 2 ",")

# Quote a string, enclosing it within terminators to make it suitable for
# reading as a Fexl string.
\fexl_quote=
	(\x
	\x=x
	\term=
		(
		\check=(\y is_void (search x y 0) y)
		check QU;
		check "~";
		(@\loop\count
		\term=(. "~"; num_str count)
		check term;
		\count=(+ count 1)
		loop count
		) 1
		)
	. term; . (eq term QU "" " "); . x; term
	)

# Convert ASCII string to upper-case.
\uc=
	(
	str_map \ch
	\n=(ord ch)
	and (ge n 97) (le n 122) (chr; - n 32) ch
	)

# Convert string to lower-case.
\lc=
	(
	str_map \ch
	\n=(ord ch)
	and (ge n 65) (le n 90) (chr; + n 32) ch
	)

# (render_data put x)
# Render x on a single line using the given output function.
\render_data=
	(\put
	@\render\x
	\x=x
	is_str x (put (fexl_quote x));
	is_num x (put (num_str x));

	\show_items==
		(
		(@\loop\space\xs
		xs () \x\xs
		if space (put " ")
		render x
		loop T xs
		) F
		)

	is_tuple x (put "{" show_items (tuple_to_list x) put "}");
	is_list x (put "[" show_items x put "]");

	is_bool x (put (x "T" "F"));
	is_undef x (put "void");
	put "?"
	)

\put_data=(render_data put)
\fput_data=(\fh render_data (fput fh))

\as_str=
	(\x
	\buf=buf_new
	\put=(buf_put buf)
	render_data put x
	buf_get buf
	)

\str_to_data=
	(\str
	value;
	def "T" T;
	def "F" F;
	def "void" void;
	parse str ""
	)

# (count_match at_beg match str) Count the number of matching characters at
# the start or end of the string.
\count_match=
	(\at_beg\match\str
	\max=(- (length str) 1)
	\index=(at_beg () (- max))
	(@\loop\N
	gt N max N;
	\ch=(slice str (index N) 1)
	match ch (\N=(+ N 1) loop N) N
	) 0
	)

# Trim matching characters at the start and/or end of the string.
\str_trim=
	(\match\at_beg\at_end\str
	\str=str
	\beg=(at_beg (count_match T match str) 0)
	\end=(at_end (count_match F match str) 0)
	\len=(max 0; - (length str) (+ beg end))
	slice str beg len
	)

\str_trim_spaces=(str_trim (\ch le ch " "))

# Trim spaces at the start and end of the string.  A space is defined as any
# ASCII character less than or equal to the space character, which includes all
# control characters.
\trim_spaces=(str_trim_spaces T T)

# Trim spaces at the start of the string.
\trim_beg_spaces=(str_trim_spaces T F)

# Trim spaces at the end of the string.
\trim_end_spaces=(str_trim_spaces F T)

\form
def "repeat_str" repeat_str;
def "format_num" format_num;
def "format_money" format_money;
def "fexl_quote" fexl_quote;
def "uc" uc;
def "lc" lc;
def "render_data" render_data;
def "put_data" put_data;
def "fput_data" fput_data;
def "as_str" as_str;
def "str_to_data" str_to_data;
def "count_match" count_match;
def "str_trim" str_trim;
def "trim_spaces" trim_spaces;
def "trim_beg_spaces" trim_beg_spaces;
def "trim_end_spaces" trim_end_spaces;
form
