#
evaluate;
use "list.fxl";
use "bool.fxl";
use_standard;
\;

\format_num=
(
# Repeat string x n times
\repeat_str=
	(\x @\loop \n
	\n=n
	le n 0 "";
	. x; loop (- n 1)
	)

# Split string x into groups of three with the given separator.
\split3=
	(\sep @\loop \x
	\x=x
	\len=(length x)
	le len 3 x
	\pos=(- len 3)
	\prefix=(slice x 0 pos)
	\suffix=(slice x pos 3)
	. (loop prefix) (. sep suffix)
	)

# Format number x to n decimal places, with an optional separator for the
# integer part.
\format_num=
	(\n\sep\x
	# Get the list of all digits without the decimal point.
	\n=n
	\x=x
	\factor=(^ 10 n)
	\digits=(num_str; round; * factor (abs x))

	# Pad 0s on the front as needed.
	\pad=(repeat_str "0" (+ 1 (- n (length digits))))
	\digits=(. pad digits)

	# Extract integer and fractional part.
	\pos=(- (length digits) n)
	\xi=(slice digits 0 pos)
	\xf=(slice digits pos n)

	# Insert separator if desired.
	\xi=(eq sep "" xi (split3 sep xi))

	# Put a "." in front of any fractional part.
	\xf=(eq xf "" "" (. "." xf))
	# Determine the sign of result.
	\sign=(lt x 0 "-" "")

	\result=(. sign; . xi xf)
	result
	)
format_num
)

\format_money=(format_num 2 ",")

# Quote a string, enclosing it within terminators to make it suitable for
# reading as a Fexl string.
\fexl_quote=
	(\x
	\x=x
	\term=
		(
		\check=(\y is_void (search x y 0) y)
		check QU;
		(@\loop\count
		\term=(. "~"; num_str count)
		check term;
		\count=(+ count 1)
		loop count
		) 1
		)
	. term; . (eq term QU "" " "); . x; term
	)

# Convert string to upper-case.  Only works with ASCII characters though.
# LATER 20160331 Make it work with full utf8.
\uc=
	(
	str_map \ch
	\n=(ord ch)
	and (ge n 97) (le n 122) (chr; - n 32) ;
	ch
	)

# Convert string to lower-case.
\lc=
	(
	str_map \ch
	\n=(ord ch)
	and (ge n 65) (le n 90) (chr; + n 32) ;
	ch
	)

\nearly_zero=(\x lt (abs x) 1e-8)

\fput_data=
	(\fh
	\put=(fput fh)

	@\put_data\x

	\x=x
	is_str x (put (fexl_quote x));
	is_num x (put (nearly_zero x "0" x));
	is_tuple x
		(
		put "{"

		(@\loop\space\xs
		split_tuple xs () \xs\x
		loop T xs
		put_data x
		if space (put " ")
		) F x

		put "}"
		);
	is_list x
		(
		put "["

		(@\loop\space\xs
		xs () \x\xs
		if space (put " ")
		put_data x
		loop T xs
		) F x

		put "]"
		);
	is_bool x (put x);
	is_void x (put "void");
	put "()"
	)

\fput_list=
	(\fh\xs
	\xs=xs

	\say=(fsay fh)
	\nl==(fnl fh)
	\show_data=(fput_data fh)

	not (is_list xs) (show_data xs nl);

	say "["
	each xs (\x show_data x nl)
	say "]"
	)

\put_data=(fput_data stdout)
\put_list=(fput_list stdout)

\form
define "format_num" format_num;
define "format_money" format_money;
define "fexl_quote" fexl_quote;
define "uc" uc;
define "lc" lc;
define "fput_data" fput_data;
define "fput_list" fput_list;
define "put_data" put_data;
define "put_list" put_list;
form
