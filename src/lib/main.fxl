# (check x d) = x if x is good, otherwise d.
\check=(\x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\\d\x is_defined x x d)

\path_under=(\dir\name . (. dir "/") name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\script_name=(default ""; argv 1)

\trace=(fsay stderr)
\error=(\msg trace msg die)

# Define key to refer to a context.
\defc= # LATER 20240820 deprecated
	(\key\cx
	@\\self
	def key self;
	cx
	)

# Define some extra functions.
\std=
(

# (if x y) = y if x is true, otherwise I.
\if=(\\x\\y x y I)

\dir_local=(dirname script_name)

\NL="
"
\TAB="	"
\CR=(chr 13)
\LF=NL
\QU=~ "~

\run_benchmark=
	(\\show\\f
	fexl_benchmark f \val\steps\bytes
	show ["steps "steps" bytes "bytes]
	val
	)

\do_benchmark=(run_benchmark trace)
\show_benchmark=(run_benchmark say)

# Use a file in the directory which contains the user's script.
\use=(\name use_file; path_under dir_local name)

def "defc" defc;
def "if" if;
def "use" use;

def "check" check;
def "default" default;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "do_benchmark" do_benchmark;
def "show_benchmark" show_benchmark;
std
)

# Load libraries into the standard context on demand.
\dir_lib=(path_under dir_base "src/lib")
\use=(\name use_file; path_under dir_lib name)

\std=(extend std; use "bool.fxl")
\std=(extend std; use "math.fxl")
\std=(extend std; use "list.fxl")
\std=(extend std; use "format.fxl")
\std=(extend std; use "indent.fxl")
\std=(extend std; use "assoc.fxl")
\std=(extend std; use "hex.fxl")
\std=(extend std; use "html.fxl")
\std=(extend std; use "time.fxl")
\std=(extend std; use "date.fxl")
\std=(extend std; use "run.fxl")
\std=(extend std; use "read.fxl")
\std=(extend std; use "read_csv.fxl")
\std=(extend std; use "read_ssv.fxl")

defc "std";
def "use_lib" use; # LATER 20241018 deprecate
std
