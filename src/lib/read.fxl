#
\scan=(\no\yes\xs xs (no []) yes)
\push=(\x\yes\xs yes [x;xs])

\is_eol=(\x eq x LF T; eq x CR)
\is_white=(ge " ")

# Skip matching characters.
\skip_match=
	(\is_match\yes @\loop
	scan yes \x
	is_match x
		loop
		(push x yes)
	)

# Buffer characters up to a specific end char.
\buffer_to=
	(\t_ch\buf\no\yes
	@\loop
	scan no \x
	eq x t_ch
		yes
		(buf_put buf x loop)
	)

# Collect characters up to an end char.  The end char is skipped.
\collect_to=
	(\is_end\no\yes
	\buf=buf_new
	@\loop
	scan no \x
	is_end x
		(\str=(buf_get buf) yes str)
		(buf_put buf x loop)
	)

# Collect characters up to an end char or EOF.  The end char is kept.
\collect_token=
	(\is_end\yes
	\buf=buf_new
	\done==(\str=(buf_get buf) yes str)
	@\loop
	scan done \x
	is_end x
		(push x done)
		(buf_put buf x loop)
	)

\read_chars=(\read read (\data\xs data))

\stream_string=
	(\str
	\fh=(readstr str)
	stream_get (sgetc fh)
	)

\stream_file=
	(\name
	\fh=(fopen name "r")
	is_void fh void;
	stream_get (fgetc fh)
	)

\read_string=
	(\read\in
	stream_string in \xs
	read_chars read xs
	)

\read_file=
	(\read\in
	stream_file in \xs
	read_chars read xs
	)

\form
def "scan" scan;
def "push" push;
def "is_eol" is_eol;
def "is_white" is_white;
def "skip_match" skip_match;
def "buffer_to" buffer_to;
def "collect_to" collect_to;
def "collect_token" collect_token;
def "read_chars" read_chars;
def "read_string" read_string;
def "read_file" read_file;
form
