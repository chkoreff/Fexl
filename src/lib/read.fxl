# Common functions for reading file formats.
evaluate;
use "list.fxl"; # file_bytes
use_standard;
\;

# Read a list of characters.
\read_chars=
	(\read\in
	read in \rows\tail
	rows
	)

# Read a named file.
\read_file=
	(\read\name
	\fh=(fopen name "r")
	if (is_void fh) (error ["Could not open "name])
	\chars=(file_bytes fh)
	\rows=(read_chars read chars)
	fclose fh
	rows
	)

# Get the next character and the tail of the input.
\get=(\in in {"" []} \ch\tail {ch tail})

# Look at the current character.
\look=(\in get in \ch\_ {ch})

\is_eol=(\ch eq ch CR T; eq ch LF T; F)

# Skip matching characters.
\skip_match=
	(\match
	@\loop \in
	get in \ch\tail
	\go=(eq ch "" F; match ch)
	go (loop tail) {in}
	)

# Collect characters up to an ending condition.
\collect_to=
	(\end
	\buf=buf_new
	@\loop \in
	get in \ch\tail
	end ch (\item=(buf_get buf) {item in});
	eq ch "" void;  # end condition not found
	buf_put buf ch
	loop tail
	)

# Get a sequence of items with a given separator and end condition.
\get_seq=
	(\read\sep\end
	@\loop \in
	skip_match sep in \in
	look in \ch
	\done=(eq ch "" T; end ch)
	done {[] in};
	read in \x\in
	loop in \xs\in
	\xs=[x;xs]
	{xs in}
	)

\form
define "read_chars" read_chars;
define "read_file" read_file;
define "get" get;
define "look" look;
define "is_eol" is_eol;
define "skip_match" skip_match;
define "collect_to" collect_to;
define "get_seq" get_seq;
form
