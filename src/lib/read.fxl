# LATER 20220715 Code in C some of the higher-level parse functions such as
# skip_match, buffer_to, collect_to, etc.

\name=(path_under dir_base "lib/stream.so")
\lib=(dlopen name)
dlsym lib "type_read_stream" \read_stream
dlsym lib "type_look" \look
dlsym lib "type_skip" \skip

\is_eol=(\x eq x LF T; eq x CR)
\is_white=(ge " ")

# Skip matching characters.
\skip_match=
	(\is_match @\loop
	\x=look
	is_undef x ();
	is_match x (skip loop);
	)

# Buffer characters up to a specific end char.  Return true if found.
\buffer_to=
	(\t_ch\buf
	@\loop
	\x=look
	is_undef x F;
	skip
	eq x t_ch T;
	buf_put buf x
	loop
	)

# Collect characters up to an end char.  The end char is skipped.
\collect_to=
	(\is_end
	\buf=buf_new
	@\loop
	\x=look
	is_undef x void;
	skip
	is_end x (buf_get buf);
	buf_put buf x
	loop
	)

# Collect characters up to an end char or EOF.  The end char is kept.
\collect_token=
	(\is_end
	\buf=buf_new
	@\loop
	\x=look
	is_undef x (buf_get buf);
	is_end x (buf_get buf);
	skip
	buf_put buf x
	loop
	)

\read_string=
	(\str
	read_stream (readstr str)
	)

\read_file=
	(\name
	read_stream (fopen name "r")
	)

\read_chars=
	(
	\flatten=
		(
		\buf=buf_new
		@\loop\xs
		xs (buf_get buf) \x\xs
		buf_put buf x
		loop xs
		)
	\xs
	\str==(flatten xs)
	read_string str
	)

\form
def "look" look;
def "skip" skip;
def "is_eol" is_eol;
def "is_white" is_white;
def "skip_match" skip_match;
def "buffer_to" buffer_to;
def "collect_to" collect_to;
def "collect_token" collect_token;
def "read_chars" read_chars;
def "read_string" read_string;
def "read_file" read_file;
form
