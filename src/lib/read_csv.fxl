# Parse the CSV (comma-separated value) format.
# NOTE: https://www.ietf.org/rfc/rfc4180.txt
# "Spaces are considered part of a field and should not be ignored."
evaluate
(
:: standard;
:: (load "read.fxl");
void
) \;

\get_plain_item==
	(
	collect_to
		(\x
		is_void x T;
		eq x "," T;
		is_eol x
		)
	)

# Get a char inside a quoted string.  A single QU char is treated as end of
# string.  Two QU chars in a row are treated as a single QU character which
# appears in the string.
\get_quote_char==
	(
	\x=get
	ne x QU x;
	\x=look
	eq x QU (skip QU);
	""
	)

# Get a quoted item.
\get_quote_item==
	(
	\buf=buf_new
	@\loop
	\x=get_quote_char
	eq x "" (buf_get buf);
	buf_put buf x
	loop
	)

\get_item==
	(
	\x=look
	eq x QU (skip get_quote_item);
	get_plain_item
	)

# Get a row.
\get_row==
	(@\loop
	\item=get_item
	is_void item [];
	\x=get
	is_void x [item];
	ne x "," [item];
	\list=loop
	[item;list]
	)

\get_rows==
	(@\loop
	skip_match is_eol
	\x=look
	is_void x [];
	\row=get_row
	\list=loop
	[row;list]
	)

\read_csv_string=(read_string get_rows)
\read_csv_chars=(read_chars get_rows)
\read_csv_file=(read_file get_rows)

def "read_csv_string" read_csv_string;
def "read_csv_chars" read_csv_chars;
def "read_csv_file" read_csv_file;
void
