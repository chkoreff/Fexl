# Parse the CSV (comma-separated value) format.
# NOTE: https://www.ietf.org/rfc/rfc4180.txt
# "Spaces are considered part of a field and should not be ignored."

\get_plain_item=
	(\yes
	\buf=buf_new
	\done==(\str=(buf_get buf) yes str)
	@\loop
	scan done \x
	eq x "," (push x done);
	is_eol x (push x done);
	buf_put buf x loop
	)

# Get a char inside a quoted string.  A single QU char is treated as end of
# string.  Two QU chars in a row are treated as a single QU character which
# appears in the string.
\get_quote_char=
	(\fail\done\keep
	scan fail \x
	eq x QU
		(
		scan done \x
		eq x QU
			(keep QU)
			(push x done)
		)
		(keep x)
	)

# Get a quoted item.
\get_quote_item=
	(\no\yes
	\buf=buf_new
	@\loop
	get_quote_char no
		(\str=(buf_get buf) yes str)
		(\x buf_put buf x loop)
	)

\get_item=
	(\no\yes
	scan no \x
	eq x QU (get_quote_item no yes);
	push x;
	get_plain_item yes
	)

\get_row=
	(@\loop\no\yes
	get_item no \item
	scan (yes [item]) \x
	eq x ","
		(loop (yes [item]) \row yes [item;row])
		(yes [item])
	)

\get_rows=
	(@\loop\yes
	skip_match is_eol;
	get_row (yes []) \row
	loop \rows yes [row;rows]
	)

\read_csv_string=(read_string get_rows)
\read_csv_chars=(read_chars get_rows)
\read_csv_file=(read_file get_rows)

def "read_csv_string" read_csv_string;
def "read_csv_chars" read_csv_chars;
def "read_csv_file" read_csv_file;
void
