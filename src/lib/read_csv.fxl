# Parse the CSV (comma-separated value) format.
# NOTE: https://www.ietf.org/rfc/rfc4180.txt
# "Spaces are considered part of a field and should not be ignored."
\get_plain_item=
	(\sep
	collect_token
		(\x
		eq x sep T;
		is_eol x T;
		F
		)
	)

# Get a quoted item.  A single QU char is treated as end of string.  Two QU
# chars in a row are treated as a single QU character which appears in the
# string.
\get_quote_item==
	(
	\buf=buf_new
	@\loop
	\x=look
	is_undef x void;
	skip
	eq x QU
		(
		\x=look
		is_undef x (buf_get buf);
		eq x QU
			(
			skip
			buf_put buf QU
			loop
			);
		buf_get buf
		);
	buf_put buf x
	loop
	)

\get_item=
	(\sep
	\x=look
	is_undef x void;
	eq x QU
		(
		skip
		get_quote_item
		)
		(get_plain_item sep)
	)

\get_row=
	(\sep @\loop
	\item=(get_item sep)
	is_undef item void;
	\row=
		(
		\x=look
		is_undef x [];
		skip
		eq x sep
			(
			\row=loop
			is_undef row [] row
			)
			[]
		)
	[item;row]
	)

\get_rows=
	(\sep @\loop
	skip_match is_eol
	\row=(get_row sep)
	is_undef row [];
	\rows=loop
	[row;rows]
	)

# comma-separated
\read_csv_string=(\x read_string x (get_rows ","))
\read_csv_chars=(\x read_chars x (get_rows ","))
\read_csv_file=(\x read_file x (get_rows ","))

# tab-separated
\read_tsv_string=(\x read_string x (get_rows TAB))
\read_tsv_chars=(\x read_chars x (get_rows TAB))
\read_tsv_file=(\x read_file x (get_rows TAB))

\form
def "read_csv_string" read_csv_string;
def "read_csv_chars" read_csv_chars;
def "read_csv_file" read_csv_file;
def "read_tsv_string" read_tsv_string;
def "read_tsv_chars" read_tsv_chars;
def "read_tsv_file" read_tsv_file;
form
