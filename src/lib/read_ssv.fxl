# Parse the SSV (space-separated value) format.

# Collect a string up to the next occurrence of the terminator string.
\collect_string=
	(\t_ch\term
	\buf_result=buf_new

	@\loop_start
	\fh_term=(readstr term)

	buffer_to t_ch buf_result
		(
		\buf_match=buf_new
		buf_put buf_match t_ch

		@\loop_term
		\t=(sgetc fh_term)
		is_undef t (buf_get buf_result);

		\x=look
		is_undef x void;
		eq x t
			(
			buf_put buf_match x
			skip
			loop_term
			);
		buf_put buf_result (buf_get buf_match)
		loop_start
		)
		void
	)

# LATER 20211227 Insist on white space terminator, forbid QU and "~".
\get_plain_item==
	(
	collect_token
		(\x
		is_white x T;
		eq x QU T;
		eq x "~" T;
		F
		)
	)

\get_item==
	(
	\x=look
	is_undef x void;
	is_eol x (skip void);
	eq x QU (skip collect_to (eq QU));
	eq x "~"
		(
		skip
		\term=(collect_to is_white)
		is_undef term void;
		collect_string x term
		);
	get_plain_item
	)

\get_row==
	(@\loop
	skip_match (\x is_eol x F; is_white x)
	\str=get_item
	is_undef str void;
	\row=loop
	\row=(is_undef row [] row)
	[str;row]
	)

\get_rows==
	(@\loop
	skip_match is_white
	\row=get_row
	is_undef row [];
	\rows=loop
	[row;rows]
	)

\read_ssv_string=(read_string get_rows)
\read_ssv_chars=(read_chars get_rows)
\read_ssv_file=(read_file get_rows)

\form
def "read_ssv_string" read_ssv_string;
def "read_ssv_chars" read_ssv_chars;
def "read_ssv_file" read_ssv_file;
form
