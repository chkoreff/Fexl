# Parse the SSV (space-separated value) format.

# Collect a string up to the next occurrence of the terminator string.
\collect_string=
	(\t_ch\term\no\yes
	\buf_result=buf_new

	@\loop_start
	\fh_term=(readstr term)

	buffer_to t_ch buf_result no
		(
		\buf_match=buf_new
		buf_put buf_match t_ch

		@\loop_term
		\t=(sgetc fh_term)
		is_undef t (\str=(buf_get buf_result) yes str);

		scan no \x
		eq x t
			(
			buf_put buf_match x
			loop_term
			)
			(
			buf_put buf_result (buf_get buf_match)
			push x;
			loop_start
			)
		)
	)

# LATER 20211227 Insist on white space terminator, forbid QU and "~".
\get_plain_item=
	(
	collect_token
		(\x
		is_white x T;
		eq x QU T;
		eq x "~" T;
		F
		)
	)

\get_item=
	(\no\yes
	scan no \x
	is_eol x no;
	eq x QU (collect_to (eq QU) no yes);
	eq x "~"
		(
		collect_to is_white no \term
		collect_string x term no yes
		);
	push x;
	get_plain_item yes
	)

\get_row=
	(@\loop\no\yes
	skip_match (\x is_eol x F; is_white x);
	get_item no \item
	loop (yes [item]) \row yes [item;row]
	)

\get_rows=
	(@\loop\yes
	skip_match is_white;
	get_row (yes []) \row
	loop \rows yes [row;rows]
	)

\read_ssv_string=(read_string get_rows)
\read_ssv_chars=(read_chars get_rows)
\read_ssv_file=(read_file get_rows)

\form
def "read_ssv_string" read_ssv_string;
def "read_ssv_chars" read_ssv_chars;
def "read_ssv_file" read_ssv_file;
form
