# Format data in a nested indented format.

# Return true if the item is a scalar.
\is_scalar=
	(\x
	is_str x T;
	is_num x T;
	is_bool x T;
	is_undef x T;
	F
	)

# (i_render_data put nl x)
# Render x in an indented format using the given output functions.
\i_render_data=
	(\put\\nl

	\render=
	(@\\render\top_prefix\x

	is_str x (put (fexl_quote x));
	is_num x (put (num_str x));
	is_bool x (put (x "T" "F"));
	is_undef x (put "void");

	\show_items=
		(
		\loop_nested=
			(\prefix
			@\\loop\xs
			xs (nl put top_prefix) \x
			nl put prefix
			render prefix x
			loop
			)

		\xs
		xs () \x
		is_scalar x
			(
			render top_prefix x
			@\\loop\xs
			xs () \x
			is_scalar x
				(
				put " " # Separator between scalars
				render top_prefix x
				loop
				)
				(
				\prefix=(. top_prefix "  ") # Indent at non-scalar
				\xt
				loop_nested prefix [x;xt]
				)
			)
			(
			\xt
			loop_nested top_prefix [x;xt]
			)
		)

	is_tuple x (put "{" show_items (tuple_to_list x) put "}");
	is_list x (put "[" show_items x put "]");

	put "?"
	)

	\x
	render "" x nl
	)

\say_data=(i_render_data put nl)
\fsay_data=(\fh i_render_data (fput fh) (fnl fh))
\trace_data=(fsay_data stderr)

\i_as_str=
	(\x
	\buf=buf_new
	\put=(buf_put buf)
	i_render_data put (put NL) x
	buf_get buf
	)

def "i_render_data" i_render_data;
def "say_data" say_data;
def "fsay_data" fsay_data;
def "trace_data" trace_data;
def "i_as_str" i_as_str;
std
