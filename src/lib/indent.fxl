# Format data in a nested indented format.

# Return true if the item is a scalar.
\is_scalar=
	(\x
	is_str x T;
	is_num x T;
	is_bool x T;
	is_void x T;
	F
	)

# (i_render_data put nl x)
# Render x in an indented format using the given output functions.
\i_render_data=
	(\put\nl\x
	\x=x
	(@\render\prefix\x

	is_str x (put (fexl_quote x));
	is_num x (put (num_str x));
	is_bool x (put (x "T" "F"));
	is_void x (put "void");

	\loop==
		(@\loop\is_first\is_nested\prefix\items
		items {is_nested} \x\items
		\x=x

		\continue==
			(\is_nested\prefix
			render prefix x
			loop F is_nested prefix items
			)

		is_nested (nl put prefix continue T prefix);
		is_scalar x (is_first () (put " ") continue F prefix);

		# Indent one level when I first see a non-scalar.
		\prefix=(is_first prefix (. prefix "  "))
		nl put prefix
		continue T prefix
		)

	\show_items==
		(\items
		loop T F prefix items \is_nested
		is_nested (nl put prefix) ()
		)

	is_tuple x (put "{" show_items (tuple_to_list x) put "}");
	is_list x (put "[" show_items x put "]");

	put "?"
	) "" x
	nl
	)

\say_data=(i_render_data put nl)
\fsay_data=(\fh i_render_data (fput fh) (fnl fh))
\trace_data=(fsay_data stderr)

\i_as_str=
	(\x
	\buf=buf_new
	\put==(buf_put buf)
	i_render_data put (put NL) x
	buf_get buf
	)

def "i_render_data" i_render_data;
def "say_data" say_data;
def "fsay_data" fsay_data;
def "trace_data" trace_data;
def "i_as_str" i_as_str;
void
