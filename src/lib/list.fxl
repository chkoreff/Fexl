# Append lists xs and ys.
\append=
	(\\xs\\ys
	(@\\loop\\xs
	xs ys \\x\\xs
	[x;\=loop xs]
	) xs
	)

# Flatten a nested list into a list of scalars.
\flatten=
	(@\\flatten\xs
	xs [] \x\xs
	is_list x (append (flatten x)) (cons x);
	flatten xs
	)

# Do f for each item in list xs.
\each=
	(\xs\f
	(@\\loop\\xs xs () \x f x loop)
	xs
	)

# Apply f to each element in list xs.
\map=
	(\\f @\\loop \\xs
	xs [] \x\\xs
	\x=(f x)
	[x;\=loop xs]
	)

# Eager map.
\map_eager=
	(\\f @\\loop \\xs
	xs [] \x\\xs
	\x=(f x)
	\xs=(loop xs)
	[x;xs]
	)

# Apply f to each element in list xs, but only keep the good results.
\map_good=
	(\\fn @\\loop \\xs
	xs [] \x\\xs
	\y=(fn x)
	is_good y (cons y) ();
	\=loop xs
	)

# (filter f xs) is the list of items x in xs for which (f x) is true.
\filter=
	(\\f @\\loop \\xs
	xs [] \x\\xs
	f x (cons x) ();
	\=loop xs
	)

# Reverse list xs.
\reverse=((@\\loop\ys\xs xs ys \x loop [x;ys]) [])

# Append a list of lists together.
\append_all=
	(@\\loop\\list
	list [] \top\\list
	append top;
	loop list
	)

# Shift the first item off a list.
\shift=(\\xs xs {void []} \x\\xs {x xs})

# Sort the list of {key val} pairs xs.  Use the combine function to combine
# values with the same key.
\combine_keys=
	(\combine\xs

	# Merge two segments together.  A segment is a list of groups.
	\merge_segments=
		(@\\loop\xs\ys
		xs ys \x\xt
		ys xs \y\yt

		x \kx\vx
		y \ky\vy

		compare kx ky
			(\tail=(loop xt ys) [x;tail])
			(
			\vx=(combine vx vy)
			\tail=(loop xt yt)
			[{kx vx};tail]
			)
			(\tail=(loop xs yt) [y;tail])
		)

	# Merge each adjoining pair of segments in a list of segments.
	\merge_adjoining_segments=
		(@\\loop\xs
		xs [] \x\ys
		ys xs \y\zs
		\z=(merge_segments x y)
		\zs=(loop zs)
		[z;zs]
		)

	# Merge all the segments in a list into a single segment.
	\merge_all_segments=
		(@\\loop\xs
		xs [] \x\ys
		ys x \_\\_
		\xs=(merge_adjoining_segments xs)
		loop xs
		)

	\segments=(map (\x [x]) xs)
	merge_all_segments segments
	)

# (merge_keys combine xs ys)
# Merge the two sorted lists of {key val} pairs xs and ys.  Return {L M R},
# which in set theory terms are defined roughly as:
#
#   L = (subtract xs ys)
#   M = (intersect xs ys)
#   R = (subtract ys xs)
#
# L is the list of pairs in xs whose key does not appear in ys.
# R is the list of pairs in ys whose key does not appear in xs.
#
# M is the list of pairs {key val} whose key appears in both xs and ys.  In
# this case the val is (combine vx vy), where vx is the x value and vy is the
# y value.
\merge_keys=
	(\combine @\\loop\xs\ys
	xs {[] [] ys} \x\xt
	ys {xs [] []} \y\yt

	x \kx\vx
	y \ky\vy

	compare kx ky
		(loop xt ys \L\M\R {[x;L] M R})
		(
		loop xt yt \L\M\R
		\v=(combine vx vy)
		{L [{kx v};M] R}
		)
		(loop xs yt \L\M\R {L M [y;R]})
	)

# Group a list of items xs into a list of groups.  Use extract to get the key
# from an item for comparison purposes.  Each group is {key list}, where list
# is the list of all items with that common key, in the same order as they
# appear in the original list (i.e. the grouping is stable).  The groups are
# listed in ascending order of key.
\group_items=
	(\extract\xs
	\xs=(map (\x \k=(extract x) {k [x]}) xs)
	combine_keys append xs
	)

# Get the list of keys from a list of pairs.
\get_keys=(map (\p p \k\\_ k))

# Get the list of values from a list of pairs.
\get_values=(map (\p p \\_\v v))

# Sort all items with a key extraction function.
\sort_all=
	(\extract\\xs
	\xs=(group_items extract xs)
	append_all; get_values xs
	)

# Sort unique items with a key extraction function.
\sort_unique=
	(\extract\\xs
	\xs=(map (\x \k=(extract x) {k x}) xs)
	\xs=(combine_keys (\x\_ x) xs) # Keep the first.
	get_values xs
	)

# The sort and unique functions operate on lists whose elements are all either
# strings or numbers.
\sort=(sort_all I)
\unique=(sort_unique I)

# Using function f and starting value z, run the function forward for each
# element in the list.
\fold=
	(\f @\\loop \z\\xs
	xs z \x
	\z=(f z x)
	loop z
	)

# Return the first n items of a list.
\first=
	(@\\loop\n\\xs
	le n 0 [];
	xs [] \x\\xs
	[x;loop (- n 1) xs]
	)

# (drop n xs) Drop the first n items in list xs.
\drop=
	(@\\loop\n\\xs
	le n 0 xs;
	xs [] \\x
	loop (- n 1)
	)

\list_sum=(fold + 0)
\list_length=(fold (\n\\_ + 1 n) 0)
\is_null=(\\xs xs T \\_\\_ F)

# Produce the list of values in the range x through y.
\range=
	(\x\y
	\x=(round x)
	\y=(round y)
	\d=(le x y 1 -1)
	(@\\loop\x
	cons x;
	eq x y [];
	loop (+ x d)
	) x
	)

# (list_at xs n) is the item at position n in list xs, counting from 0.
\list_at=
	(@\\loop\\xs\n
	xs void \\x\\xs
	compare n 0
		void
		x
		(loop xs (- n 1))
	)

# Combine the elements of two lists pairwise.
\list_combine=
	(\\f @\\loop\\xs\\ys
	xs ys \\x\\xt
	ys xs \\y\\yt
	\z=(f x y)
	[z;loop xt yt]
	)

# Get the nth column of a table, numbered from 0.
\column=(\n map (\row list_at row n))

# Given a list of rows, return a function which maps the key at key_pos to the
# value at val_pos.
\match_column=
	(\key_pos\val_pos @\\loop \\rows
	rows void \row\\rows

	\key=(list_at row key_pos)
	\val=(list_at row val_pos)

	with key val;
	loop rows
	)

# (stream_values get) is the infinite list of future values of get.  This is
# useful for generating streams of random values.
\stream_values=
	(\\get @\\loop
	\x=get
	[x;\=loop]
	)

# (stream_get get) yields the list of future value of get, terminated by void.
# This is useful for producing a stream of characters from a file get function.
\stream_get=
	(\\get
	yield;
	\=
	@\\loop
	\x=get
	is_undef x [] [x;\=loop]
	)

# Gather input items into a list.  This is equivalent to stream_values except
# that it terminates when it sees a void value.
\get_list=
	(\\get @\\loop
	\x=get
	is_undef x [] [x;\=loop]
	)

# Flatten a piece of data (string, number, boolean, or list) into a string.
\to_str=
	(\x
	\buf=buf_new
	\put=(buf_put buf)
	(@\\loop\x
	is_str x (put x);
	is_num x (put (num_str x));
	is_bool x (put (x "T" "F"));
	is_list x (x () \x loop x loop);
	) x
	buf_get buf
	)

# Gather input strings into a string.
\get_str=
	(\\get
	\buf=buf_new
	@\\loop
	\x=get
	is_undef x (buf_get buf);
	buf_put buf x
	loop
	)

# Gather a list of strings into a string.
\\list_str=
	(
	\buf=buf_new
	@\\loop\\xs
	xs (buf_get buf) \x
	buf_put buf x
	loop
	)

# Convert a string to a list with a given function.
\\get_str_list=
	(\\get\str
	\in=(readstr str)
	get_list (get in)
	)

# Return the list of individual bytes in a string.
\str_bytes=(get_str_list sgetc)

# Return the list of UTF-8 characters in a string.
\str_chars=(get_str_list sget)

# Apply a function to each logical character of a string.
\str_map=(\f\str list_str; map f; str_chars str)

# Insert separators between elements of a list.
\join_list=
	(\sep\\xs
	xs [] \x\\xs
	[x; (@\\loop\\xs xs [] \x\\xs [sep x; loop xs]) xs ]
	)

# Insert separators between elements of a list and flatten into a string.
\join=(\sep\\xs to_str; join_list sep xs)

\join_path=(join "/")

\split=
	(\sep\str
	\len_sep=(length sep)
	eq len_sep 0 [str];

	(@\\loop\offset
	\pos=(search str sep offset)
	is_undef pos
		(
		\len_str=(length str)
		\top=(slice str offset (- len_str offset))
		[top]
		);

	\top=(slice str offset (- pos offset))
	cons top;
	loop (+ pos len_sep)
	) 0
	)

# Return the (lazy) list of bytes read from the file handle.
\file_bytes=(\fh get_list (fgetc fh))

# Return the entire string contained within a file.
\file_content=
	(\fh
	\buf=buf_new
	@\\loop
	\text=(fread fh 8192)
	eq text "" (buf_get buf);
	buf_put buf text
	loop
	)

# True if the string starts with the given prefix.
\starts_with=
	(\prefix\str
	eq (length_common prefix str) (length prefix)
	)

# True if the string ends with the given suffix.
\ends_with=
	(\suffix\str
	eq "" suffix T;
	\start=(- (length str) (length suffix))
	\pos=(search str suffix start)
	is_undef pos F;
	eq pos start
	)

# (map_bytes_to_double bytes)
# Map the series of byte values (numbers in the range 0 to 255) into a double-
# precision floating point value.
#
# Test vectors:
# [0 0 0 0 0 0 0]               => 0
# [255 255 255 255 255 255 63]  => 0.25
# [255 255 255 255 255 255 127] => 0.5
# [255 255 255 255 255 255 191] => 0.75
# [255 255 255 255 255 255 255] => 1
\map_bytes_to_double=(fold (\x\b / (+ x b) 256) 0)

# Get a random double-precision floating point value in the range 0 to 1
# inclusive.
\\random_double=
	(
	\bytes=(map ord; str_bytes; random_bytes 7)
	map_bytes_to_double bytes
	)

# Return true if data items x and y are equal.
\eq_data=
	(
	\eq_list=
		(\\eq_data\x\y
		x (y T \_\_ F) \xh\xt
		y F \yh\yt
		eq_data xh yh (eq_data xt yt) F
		)

	@\\eq_data\x\y
	\\check_type=(\is_type\\compare is_type x (is_type y compare F))

	check_type is_str (eq x y);
	check_type is_num (eq x y);
	check_type is_bool (x y (not y));
	check_type is_undef T;
	check_type is_list (eq_list eq_data x y);
	check_type is_tuple (eq_list eq_data (tuple_to_list x) (tuple_to_list y));
	F
	)

# Make a cache which remembers the values of a function with n arguments.
\remember=
	(\n
	\v=var_new

	(@\\loop\n
	le n 1 fetch;
	\f=(loop (- n 1))

	\v\k
	\v=(fetch v k var_new)
	f v
	) n v
	)

# Equivalent to (remember 1).
\\cache=(\v=var_new fetch v)

def "append" append;
def "flatten" flatten;
def "each" each;
def "map" map;
def "map_eager" map_eager;
def "map_good" map_good;
def "filter" filter;
def "reverse" reverse;
def "append_all" append_all;
def "shift" shift;
def "combine_keys" combine_keys;
def "merge_keys" merge_keys;
def "group_items" group_items;
def "get_keys" get_keys;
def "get_values" get_values;
def "sort_all" sort_all;
def "sort_unique" sort_unique;
def "sort" sort;
def "unique" unique;
def "fold" fold;
def "first" first;
def "drop" drop;
def "list_sum" list_sum;
def "list_length" list_length;
def "is_null" is_null;
def "range" range;
def "list_at" list_at;
def "list_combine" list_combine;
def "column" column;
def "match_column" match_column;
def "stream_values" stream_values;
def "stream_get" stream_get;
def "get_list" get_list;
def "to_str" to_str;
def "get_str" get_str;
def "list_str" list_str;
def "str_bytes" str_bytes;
def "str_chars" str_chars;
def "str_map" str_map;
def "join_list" join_list;
def "join" join;
def "join_path" join_path;
def "split" split;
def "file_bytes" file_bytes;
def "file_content" file_content;
def "starts_with" starts_with;
def "ends_with" ends_with;
def "map_bytes_to_double" map_bytes_to_double;
def "random_double" random_double;
def "eq_data" eq_data;
def "remember" remember;
def "cache" cache;
std
