# Run a child function with the given input.  Collect the stdout as it runs,
# and collect the stderr after it terminates.  Return the output, error, and
# status.
# LATER 20180326 Use select(2) to multiplex between stdout and stderr, instead
# of collecting stderr only after the child terminates.
\run_function=
	(\child_fn\input
	spawn child_fn \child_in\child_out\child_err

	fput child_in input
	fclose child_in

	\out=(file_content child_out)

	\status
	\err=(file_content child_err);
	{ out err status }
	)

# Run the function (exec argv).
\run_program=
	(\argv
	run_function (exec argv)
	)

# Run a function with the given input, returning the output as a string.  If
# there was any error, show that on stderr and die.
\run_function_filter=
	(\child_fn\input
	run_function child_fn input \out\err\status
	if (ne status 0) (error err)
	out
	)

# Run (exec argv) as a filter.
\run_filter=
	(\argv
	run_function_filter (exec argv)
	)

# Grab the output of a function, passing in null input.
\grab_output=
	(\child_fn
	run_function_filter child_fn ""
	)

define "run_function" run_function;
define "run_program" run_program;
define "run_function_filter" run_function_filter;
define "run_filter" run_filter;
define "grab_output" grab_output;
standard
