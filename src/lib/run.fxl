#use_new_syntax
# Run a child function with the given input.  Collect the stdout as it runs,
# and collect the stderr after it terminates.  Return the output, error, and
# status.
\run_function=
	(\child_fn\input
	spawn child_fn \child_in\child_out\child_err

	fput child_in input
	fclose child_in

	\\out=(file_content child_out)

	\status
	\\err=(file_content child_err)
	{ out err status }
	)

# Run the function (exec argv).
\run_program=
	(\argv
	run_function (exec argv)
	)

# Run a function with the given input, returning the output as a string.  If
# there was any error, show that on stderr and die.
\run_function_filter=
	(\child_fn\input
	run_function child_fn input \out\err\status
	if (ne status 0) (error err)
	out
	)

# Run (exec argv) as a filter.
\run_filter=
	(\argv
	run_function_filter (exec argv)
	)

# Grab the output of a function, passing in null input.
\grab_output=
	(\child_fn
	run_function_filter child_fn ""
	)

# LATER 20230425 Use a pid file instead, because if you're running the browser
# on the same machine as the server, this can kill the browser too.
\stop_server=
	(\ip\port
	\argv=["/usr/bin/lsof" (to_str ["-i4TCP@"ip":"port]) "-t"]
	\\out=(run_function (exec argv) "" \out\err\status out)
	\\list_pid=(map str_num; filter (ne ""); split NL out)

	each list_pid
		(\pid
		kill pid 2 # SIGINT
		)
	)

\run_server=
	(\option\ip\port\error_log\interact

	\start_server=(start_server ip port error_log interact)
	\stop_server=(stop_server ip port)

	\ok=
		(
		is_void option F;
		eq option "start" T;
		eq option "stop" T;
		F
		)

	if (not ok) (error ~ Please specify either "start" or "stop".~)

	stop_server
	if (eq option "start") start_server
	)

\form
def "run_function" run_function;
def "run_program" run_program;
def "run_function_filter" run_function_filter;
def "run_filter" run_filter;
def "grab_output" grab_output;
def "stop_server" stop_server;
def "run_server" run_server;
form
