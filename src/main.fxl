# Run the user's script given by argv[1] in the enhanced standard context.

\TAB="	"
\NL="
"
\CR=(chr 13)
\LF=NL
\QU=~ "~

# (if x y) = y if x is true, other I.
\if=(\x\y x y I)

# (check x d) = x if x is good, otherwise d.
\check=(\x \x=x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\d\x \x=x is_defined x x d)

\trace=(fsay stderr)
\error=(\msg trace msg die)

\path_under=(\dir\name . (. dir "/") name)

# Return an object with key defined as val.
\with=
	(\key\val\obj
	\obj=obj
	\x
	eq x key val;
	obj x
	)

# Return a context with key defined as val.
\def=(\key\val with key {val})

# Use a file given by a direct path.
\use_file=(\name\context evaluate context; parse_file name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\dir_lib=(path_under dir_base "src/lib")

\script_name=(default "" (argv 1))
\dir_local=(dirname script_name)

# Return (f x) if defined, otherwise (g x).
\:=(\f\g\x \v=(f x) is_defined v v; g x)

# Create a cache that evaluates a function and stores the value at a given key.
# Subsequent calls with the same key return the originally stored value.
\new_cache==
	(
	\table=var_new
	\key\fn

	\val=(var_get table key)
	is_defined val val;

	\val=fn
	var_put table (with key val; var_get table)
	val
	)

# Evaluate the user's script.
use_file script_name;

\cache_use_lib=new_cache
\cache_use=new_cache

@\context

\lib==
	(\name
	cache_use_lib name;
	use_file (path_under dir_lib name) context
	)

\use==
	(\name
	cache_use name;
	use_file (path_under dir_local name) context
	)

def "standard" context;

: standard;

def "def" def;
def "if" if;

def "lib" lib;
def "use" use;

def "with" with;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "check" check;
def "default" default;
def "use_file" use_file;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def ":" :;
def "new_cache" new_cache;

: (lib "bool.fxl");
: (lib "math.fxl");
: (lib "list.fxl");
: (lib "format.fxl");
: (lib "hex.fxl");
: (lib "run.fxl");
void
