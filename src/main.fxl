# Run the user's script given by argv[1] in the enhanced standard context.

# (check x d) = x if x is good, otherwise d.
\check==(\x \x=x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default==(\d\x \x=x is_defined x x d)

# Use the context only if the form has open symbols.
\::==
	(\cx\form
	\form=form
	is_closed form form;
	cx form
	)

# Define key to refer to a context.
\defc==
	(\key\cx
	\cx=cx
	@\self\form
	cx; def key self; form
	)

\path_under=(\dir\name . (. dir "/") name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\script_name=(default ""; argv 1)

# Define some extra functions.
\extra==
(\=
# (if x y) = y if x is true, other I.
\if=(\x\y x y I)

\dir_local=(dirname script_name)

\trace=(fsay stderr)
\error=(\msg trace msg die)

# Make a cache which remembers the values of a function with n arguments.
\remember=
	(\n
	\v=var_new
	(@\loop\n
	le n 1 fetch;
	\n=(- n 1)
	\f=(loop n)
	\v\k
	\v=(fetch v k var_new)
	f v
	) n v
	)

# Equivalent to (remember 1).
\cache==(\v=var_new fetch v)

\NL=="
"
\TAB=="	"
\CR==(chr 13)
\LF==NL
\QU==~ "~

\run_benchmark=
	(\show\f
	fexl_benchmark f \val\steps\bytes
	show ["steps "steps" bytes "bytes]
	val
	)

\do_benchmark=(run_benchmark trace)
\show_benchmark=(run_benchmark say)

# Use a file in the directory which contains the user's script.
\use==(\name use_file; path_under dir_local name)

# Map a dynamic get function to a fixed stream of values.
# LATER 20211228 Do stream_get in C.
\stream_get=
	(\get\yes
	yes;
	\=
	@\loop
	\x=get
	is_undef x [] [x;\=loop]
	)

\form
def "defc" defc;
def "if" if;
def "::" ::;
def "use" use;

def "check" check;
def "default" default;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "remember" remember;
def "cache" cache;
def "do_benchmark" do_benchmark;
def "show_benchmark" show_benchmark;
def "stream_get" stream_get;
form
)

# Enhance the standard context to load libraries on demand.
\std=
(
\dir_lib=(path_under dir_base "src/lib")
\use==(\name use_file; path_under dir_lib name)

\bool==(\= value; std; use "bool.fxl")
\math==(\= value; std; use "math.fxl")
\list==(\= value; bool; std; use "list.fxl")
\format==(\= value; list; math; bool; extra; std; use "format.fxl")
\indent==(\= value; format; extra; std; use "indent.fxl")
\assoc==(\= value; list; std; use "assoc.fxl")
\hex==(\= value; math; list; bool; std; use "hex.fxl")
\html==(\= value; format; hex; list; extra; std; use "html.fxl")
\time==(\= value; extra; std; use "time.fxl")
\date==(\= value; list; math; std; use "date.fxl")
\run==(\= value; bool; list; extra; std; use "run.fxl")
\read==(\= value; extra; std; use "read.fxl")
\read_csv==(\= value; read; extra; std; use "read_csv.fxl")
\read_ssv==(\= value; read; extra; std; use "read_ssv.fxl")

defc "std";
\form
:: read_ssv;
:: read_csv;
:: run;
:: date;
:: time;
:: html;
:: hex;
:: assoc;
:: indent;
:: format;
:: list;
:: math;
:: bool;
:: extra;
std form
)

# Evaluate the user's script.
value; std; use_file script_name
