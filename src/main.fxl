# Run the user's script given by argv[1] in the enhanced standard context.

# (check x d) = x if x is good, otherwise d.
\check=(\x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\\d\x is_defined x x d)

\path_under=(\dir\name . (. dir "/") name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\script_name=(default ""; argv 1)

\trace=(fsay stderr)
\error=(\msg trace msg die)

# Define key to refer to a context.
\defc=
	(\key\cx
	@\\self
	def key self;
	cx
	)

# Define some extra functions.
\\extra=
(\=

# (if x y) = y if x is true, other I.
\if=(\\x\\y x y I)

\dir_local=(dirname script_name)

\NL="
"
\TAB="	"
\CR=(chr 13)
\LF=NL
\QU=~ "~

\run_benchmark=
	(\\show\\f
	fexl_benchmark f \val\steps\bytes
	show ["steps "steps" bytes "bytes]
	val
	)

\do_benchmark=(run_benchmark trace)
\show_benchmark=(run_benchmark say)

# Use a file in the directory which contains the user's script.
\use=(\name use_file; path_under dir_local name)

def "defc" defc;
def "if" if;
def "use" use;

def "check" check;
def "default" default;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "do_benchmark" do_benchmark;
def "show_benchmark" show_benchmark;
void
)

# Enhance the standard context to load libraries on demand.
\std=
(
# LATER 20240424 Use extend instead of defc.
\extend=(\cx value (def "std" cx; cx))

\dir_lib=(path_under dir_base "src/lib")
\use=(\name use_file; path_under dir_lib name)

\v=var_new # Var for caching modules.

# Load a Fexl module in src/lib.
\load=
	(@\\load\name
	fetch v name;
	extend (def "load" load; :: extra; std);
	use name
	)

# Load a shared library in lib.
\load_so=
	(\module

	\path=(path_under dir_base (. "lib/"; . module ".so"))
	\lib=(dlopen path)
	is_void lib (error dlerror);

	\sym=(. "type_cx_" module)
	\entry=(dlsym lib sym)
	is_void entry (error ["Could not find symbol "sym]);

	entry ()
	)

defc "std";
:: std;
def "load" load_so; # LATER 20240424 Rename as "load_so".
def "use_lib" use;
:: extra;
:: (load "bool.fxl");
:: (load "math.fxl");
:: (load "list.fxl");
:: (load "format.fxl");
:: (load "indent.fxl");
:: (load "assoc.fxl");
:: (load "hex.fxl");
:: (load "html.fxl");
:: (load "time.fxl");
:: (load "date.fxl");
:: (load "run.fxl");
:: (load "read_csv.fxl");
:: (load "read_ssv.fxl");
void
)

# Evaluate the user's script.
value std; use_file script_name
