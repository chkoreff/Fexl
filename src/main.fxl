# Run the user's script given by argv[1] in the enhanced standard context.

# Use a file given by a direct path.
\use_file=(\name\context evaluate context; parse_file name)

# (check x d) = x if x is good, otherwise d.
\check=(\x \x=x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\d\x \x=x is_defined x x d)

# Chain prev and next.  Returns a context which tries prev first, then next.
\::=
	(\prev\next
	\key
	\val=((\= prev) key)
	is_defined val val;
	(\= next) key
	)

# (if x y) = y if x is true, other I.
\if=(\x\y x y I)

\trace=(fsay stderr)
\error=(\msg trace msg die)

# Return an object with key defined as val.
\with=
	(\key\val\obj
	\obj=obj
	\x
	eq x key val;
	obj x
	)

# Return a context with key defined as val.
\def=(\key\val with key {val})

\path_under=(\dir\name . (. dir "/") name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\dir_lib=(path_under dir_base "src/lib")

\script_name=(default "" (argv 1))
\dir_local=(dirname script_name)

# Use a file in the Fexl library directory.
\use_lib=(\name use_file (path_under dir_lib name))

# Use a file in the directory which contains the user's script.
\use=(\name use_file (path_under dir_local name))

# Cache a non-recursive function.
\cache==
	(
	\table=var_new
	\fn
	\key

	\key=key
	\val=(var_get table key)
	is_defined val val;

	\val=(fn key)

	var_put table (with key val; var_get table)
	val
	)

# Cache a recursive function.
\cache_loop==
	(
	\table=var_new
	\fn
	@\loop\key

	\key=key
	\val=(var_get table key)
	is_defined val val;

	\val=(fn loop key)
	var_put table (with key val; var_get table)
	val
	)

\NL=="
"
\TAB=="	"
\CR==(chr 13)
\LF==NL
\QU==~ "~

\import=(\cx\key with key (cx key))
\import_as=(\cx\key\name with name (cx key))

\load=
	(
	cache_loop \load\name
	use_lib name;
	:: standard;
	def "def" def;
	def "::" ::;
	def "load" load;
	def "if" if;
	def "NL" NL;
	def "QU" QU;
	def "CR" CR;
	def "LF" LF;
	def "with" with;
	def "trace" trace;
	def "error" error;
	void
	)

# Evaluate the user's script.
use_file script_name;
:: standard;

def "def" def;
def "if" if;
def "with" with;
def "::" ::;

def "use" use;
def "use_file" use_file;

def "check" check;
def "default" default;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "cache" cache;
def "cache_loop" cache_loop;
def "import" import;
def "import_as" import_as;

# Chain the libraries to load on demand.
:: (load "bool.fxl");
:: (load "math.fxl");
:: (load "list.fxl");
:: (load "format.fxl");
:: (load "indent.fxl");
:: (load "assoc.fxl");
:: (load "hex.fxl");
:: (load "html.fxl");
:: (load "time.fxl");
:: (load "date.fxl");
:: (load "run.fxl");
:: (load "read_csv.fxl");
:: (load "read_ssv.fxl");
:: (load "index.fxl");
void
