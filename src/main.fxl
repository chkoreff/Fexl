# Run the user's script given by argv[1] in the enhanced standard context.

# Use a file given by a direct path.
\use_file=(\name\context evaluate context; parse_file name)

# (check x d) = x if x is good, otherwise d.
\check=(\x \x=x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\d\x \x=x is_defined x x d)

# Chain prev and next.  Returns a context which tries prev first, then next.
\chain=
	(\prev\next
	\key
	\val=(prev key)
	is_defined val val;
	next key
	)

# Chain contexts but only evaluate them once. (LATER 20210616 deprecate)
\::=(\prev\next chain (\= prev) (\= next))

# (if x y) = y if x is true, other I.
\if=(\x\y x y I)

\trace=(fsay stderr)
\error=(\msg trace msg die)

# Return a context with key defined as val.
\def=(\key\val with key {val})

\path_under=(\dir\name . (. dir "/") name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\dir_lib=(path_under dir_base "src/lib")

\script_name=(default "" (argv 1))
\dir_local=(dirname script_name)

# Use a file in the Fexl library directory.
\use_lib=(\name use_file (path_under dir_lib name))

\def_lib=
	(\key\name\cx
	\cx=cx
	def key (\= use_lib name cx) cx
	)

# Use a file in the directory which contains the user's script.
\use=(\name use_file (path_under dir_local name))

# Make a cache which remembers the values of a function with n arguments.
\remember=
	(\n
	\v=var_new
	(@\loop\n
	le n 1 fetch;
	\n=(- n 1)
	\f=(loop n)
	\v\k
	\v=(fetch v k var_new)
	f v
	) n v
	)

# Equivalent to (remember 1).
\cache==(\v=var_new fetch v)

\NL=="
"
\TAB=="	"
\CR==(chr 13)
\LF==NL
\QU==~ "~

\import=(\cx\key with key (cx key))
\import_as=(\cx\key\name with name (cx key))

\run_benchmark=
	(\show\f
	fexl_benchmark f \val\steps\bytes
	show ["steps "steps" bytes "bytes]
	val
	)

\do_benchmark=(run_benchmark trace)
\show_benchmark=(run_benchmark say)

\depend=
	(\list\exp
	\cx==
		(
		(@\loop\list
		list void \cx\list
		chain cx; \= loop list
		) list
		)
	evaluate cx exp
	)

\:base=
(
def "def" def;
def "if" if;
def "chain" chain;
def "::" ::;
def "depend" depend;

def "use" use;
def "use_file" use_file;

def "check" check;
def "default" default;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "remember" remember;
def "cache" cache;
def "import" import;
def "import_as" import_as;
def "do_benchmark" do_benchmark;
def "show_benchmark" show_benchmark;
standard
)

evaluate
(
def_lib ":read_csv" "read_csv.fxl";
def_lib ":read_ssv" "read_ssv.fxl";
def_lib ":read" "read.fxl";
def_lib ":run" "run.fxl";
def_lib ":date" "date.fxl";
def_lib ":time" "time.fxl";
def_lib ":html" "html.fxl";
def_lib ":hex" "hex.fxl";
def_lib ":assoc" "assoc.fxl";
def_lib ":indent" "indent.fxl";
def_lib ":format" "format.fxl";
def_lib ":list" "list.fxl";
def_lib ":math" "math.fxl";
def_lib ":bool" "bool.fxl";
def ":base" :base;
:base
) \;

# Evaluate the user's script, chaining the libraries to load on demand.
\script_name==(default "" (argv 1))

depend [:base :bool :math :list :format :indent :assoc :hex :html :time :date
	:run :read_csv :read_ssv];
parse_file script_name
