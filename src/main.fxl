# Run the user's script given by argv[1] in the enhanced standard context.

# Use a file given by a direct path.
\use_file=(\name\context evaluate context; parse_file name)

# (check x d) = x if x is good, otherwise d.
\check=(\x \x=x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\d\x \x=x is_defined x x d)

# Returns a context which tries prev first, then next.
\::=
	(\prev\next
	\key
	\val=((\= prev) key)
	is_defined val val;
	(\= next) key
	)

# Chain a list of contexts together, trying each one in turn.
# LATER 20210623 Deprecate chain
\chain=
	(@\loop\list
	list void \cx\list
	\key
	\val=((\= cx) key)
	is_defined val val;
	(\= loop list) key
	)

\using=(\list evaluate (chain list))
# LATER 20210623 Deprecate using

# (if x y) = y if x is true, other I.
\if=(\x\y x y I)

\trace=(fsay stderr)
\error=(\msg trace msg die)

# Return a context with key defined as val.
\def=(\key\val with key {val})

\path_under=(\dir\name . (. dir "/") name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\dir_lib=(path_under dir_base "src/lib")

\script_name=(default "" (argv 1))
\dir_local=(dirname script_name)

# Use a file in the directory which contains the user's script.
\use=(\name use_file (path_under dir_local name))

# Make a cache which remembers the values of a function with n arguments.
\remember=
	(\n
	\v=var_new
	(@\loop\n
	le n 1 fetch;
	\n=(- n 1)
	\f=(loop n)
	\v\k
	\v=(fetch v k var_new)
	f v
	) n v
	)

# Equivalent to (remember 1).
\cache==(\v=var_new fetch v)

\NL=="
"
\TAB=="	"
\CR==(chr 13)
\LF==NL
\QU==~ "~

\import=(\cx\key with key (cx key))
\import_as=(\cx\key\name with name (cx key))

\run_benchmark=
	(\show\f
	fexl_benchmark f \val\steps\bytes
	show ["steps "steps" bytes "bytes]
	val
	)

\do_benchmark=(run_benchmark trace)
\show_benchmark=(run_benchmark say)

# Define a function which maps a library name to its definition within a given
# directory and base context.  This remembers definitions so they are not
# loaded multiple times.
# LATER 20210623 Deprecate def_lib
\def_lib=
	(\dir\cx
	\memo=cache
	@\lib\name
	memo name;
	evaluate (def "lib" lib; cx);
	parse_file (path_under dir name)
	)

\std=
(
def "def" def;
def "if" if;
def "::" ::;
def "chain" chain;
def "using" using;
def "def_lib" def_lib;

def "use" use;
def "use_file" use_file;

def "check" check;
def "default" default;

def "path_under" path_under;
def "dir_base" dir_base;
def "dir_local" dir_local;

def "trace" trace;
def "error" error;

def "TAB" TAB;
def "NL" NL;
def "CR" CR;
def "LF" LF;
def "QU" QU;

def "remember" remember;
def "cache" cache;
def "import" import;
def "import_as" import_as;
def "do_benchmark" do_benchmark;
def "show_benchmark" show_benchmark;
standard
)

# Chain the libraries to load on demand.
\std=
(
\use=(\name use_file (path_under dir_lib name))

\bool==(\= use "bool.fxl"; std)
\math==(\= use "math.fxl"; std)
\list==(\= use "list.fxl"; :: std; bool)
\format==(\= use "format.fxl"; :: std; :: bool; :: math; list)
\indent==(\= use "indent.fxl"; :: std; format)
\assoc==(\= use "assoc.fxl"; :: std; list)
\hex==(\= use "hex.fxl"; :: std; :: list; :: bool; math)
\html==(\= use "html.fxl"; :: std; :: list; :: hex; format)
\time==(\= use "time.fxl"; std)
\date==(\= use "date.fxl"; :: std; :: math; list)
\run==(\= use "run.fxl"; :: std; :: list; bool)
\read==(\= use "read.fxl"; std)
\read_csv==(\= use "read_csv.fxl"; :: std; read)
\read_ssv==(\= use "read_ssv.fxl"; :: std; :: read; list)

:: std;
:: bool;
:: math;
:: list;
:: format;
:: indent;
:: assoc;
:: hex;
:: html;
:: time;
:: date;
:: run;
:: read_csv;
read_ssv
)

# Evaluate the user's script.
use_file script_name std
