# Run the user's script given by argv[1] in the enhanced standard context.

\TAB="	"
\NL="
"
\CR=(chr 13)
\LF=NL
\QU=~ "~

# (if x y) = y if x is true, other I.
\if=(\x\y x y I)

# (check x d) = x if x is good, otherwise d.
\check=(\x \x=x is_defined x x)
# (default d x) = x if x is good, otherwise d.
\default=(\d\x \x=x is_defined x x d)

\map_hex_to_raw_bytes=pack
\map_raw_bytes_to_hex=unpack

\trace=(fsay stderr)
\error=(\msg trace msg die)

\path_under=(\dir\name . (. dir "/") name)

# Return an object with key defined as val.
\with=
	(\key\val\obj
	\obj=obj
	\x
	eq x key val;
	obj x
	)

# Return a context with key defined as val.
\define=(\key\val with key {val})

# Use a file given by a direct path.
\use_file=(\name\context evaluate context; parse_file name)

# Establish paths based on command arguments.
\dir_base=(dirname; dirname; argv 0)
\dir_lib=(path_under dir_base "src/lib")

\script_name=(default "" (argv 1))
\dir_local=(dirname script_name)

# Use a file in the Fexl library directory.
\use_lib=(\name use_file (path_under dir_lib name))

# Use a file in the directory which contains the user's script.
\use=(\name use_file (path_under dir_local name))

# Evaluate the user's script.
use_file script_name;

use_lib "run.fxl";
use_lib "format.fxl";
use_lib "hex.fxl";
use_lib "list.fxl";
use_lib "math.fxl";
use_lib "bool.fxl";

define "define" define;
define "if" if;
define "with" with;

define "TAB" TAB;
define "NL" NL;
define "CR" CR;
define "LF" LF;
define "QU" QU;

define "check" check;
define "default" default;
define "map_hex_to_raw_bytes" pack;
define "map_raw_bytes_to_hex" unpack;
define "use_file" use_file;
define "use_lib" use_lib;
define "use" use;

define "path_under" path_under;
define "dir_base" dir_base;
define "dir_local" dir_local;

define "trace" trace;
define "error" error;
standard
