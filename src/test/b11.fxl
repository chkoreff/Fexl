#
evaluate
(
use_lib "html.fxl";
use_lib "date.fxl";
standard
) \;
(
\try=
	(\path
	say ["path "path]
	say ["dir  "(dirname path)]
	nl
	)
try "a"
try "a/b/c"
try "a/b/c///"
try "../////"
try "////b/////"
try "a/b////c///"
try "aaa/bbb////ccc///"
)

(
\try=
	(\path
	say ["path "path]
	say ["base "(basename path)]
	nl
	)
try "a/b/c"
try "a/b/c///"
try "a/b/cde///"
try "a"
try ""
try "/a"
try "////a"
try "/"
)

(
if F (say (readlink "/proc/self/exe"))

if T (say "hi")
say (and T F)
say (mod 48 3)
say (mod 396398872 181115)
say (exp 1)
say pi
say tau
each ["a" "b"] say
say (date_normal "20170719")
say (quote ~ <b>x;"y"</b>~)
say (format_money 3874511.37)
say (hex_digit 14)

(
\try=
	(\x
	put_data x nl
	put_list x nl
	)
try ["<b>a</b>" { 1.2 3.8 "xxx"} T F]
)

(
\try=
	(\x
	put_quote_data x nl
	put_quote_list x nl
	)
try ["<b>a</b>" { 1.2 3.8 "xxx"} T F]
try ["<b>a</b>" ~ tag "<br>"~ { 1.2 3.8 "xxx"} T F]
put_quote_data ~ 1"2"3~ nl
nl
)

# Test round-trip
(
\data=["a" QU (T 23 46) {1 2} [T F ~ "hi"~ void] -2.3]
\data=(append data data)

\str1=(data_to_str data)
say str1

\data=(str_to_data str1)
\str2=(data_to_str data)
say str2
say (eq str1 str2)
)
)

(
say "= test file_content"
\fh=(fopen (path_under dir_local "chars.fxl") "r")
\str=(file_content fh)
\str=(slice str 0 28)
put str
nl
)

(
\rows=
[
["a" "red" 42]
["b" "blue" 93]
["c" "orange" 2]
]

\get_color=(match_column 0 1 rows)
\get_qty=(match_column 0 2 rows)

\try=
	(\key
	\color=(get_color key)
	\qty=(get_qty key)
	say ["key "key" color "color" qty "qty]
	)

try "c"
try "a"
try "d"
try "b"
nl
)

(
\try=
	(\sep\list

	\str=(join sep list)

	put "sep   " put_data sep nl
	put "str   " put_data str nl

	\list=(split sep str)
	put "list  "put_data list nl

	\_str=(join sep list)
	if (ne str _str) (say ["BAD   "_str])
	nl
	)

\list=
[
""
"a"
"b"
~ "hi"~
""
""
"d"
"e"
""
]

try "/" list
try "[XYZ]" list

try "/" ["a" "b" "c"]
try "." ["a" "b" "c"]

try "" ["a"]
try "" []
try "" ["" ""]

try "/" ["" ""]
try "//" ["" "" ""]
)

(
# Demonstrate the equivalence of:
#   \x=D F
#   eval D \x F

( \x=(put "!" 4) say (+ x x) )
( eval (put "!" 4) \x say (+ x x) )

# Demonstrate the equivalence of:
#   \x==D F
#   (\x F) D

( \x==(put "!" 4) say (+ x x) )
( (\x say (+ x x)) (put "!" 4) )
)

(
tag ["td align=" "right"] (put "X")
tag "div class=a" (say "X")
_tag "div class=a" (put "X") nl
)

put_data (skip 4 (range 1 7)) nl

say (format_num 2 "," (put "!" 12345.67))
say (fexl_quote (put "!" "hello"))
say (uc (put "!" "abc"))
put_data (put "!" { 1 2 3 }) nl
put_list (put "!" ["a" "b" "c"])

\list=(str_chars "abc")
put_list list
put_list list
put_list void
put_list 32.8

say (make_url [])
say (make_url [{"color" "red"}])
say (make_url [{"color" "red"} {"other" ""} {"shape" "circle"}])
say (make_url
	[
	{ "color" "blue" }
	{
	~ key"!*'();:@&=+$,/?#[]%"1~
	~ val"!*'();:@&=+$,/?#[]%"1~
	}
	{ "=" "=" }
	]
	)

\x=
	(
	\alpha="abcdefghijklmnopqrstuvwxyz"
	to_str
	[
	":"
	alpha
	(uc alpha)
	"0123456789"
	]
	)

say x
say (uc x)
say (lc x)

say ["TAB "(ord TAB)]
say ["NL "(ord NL)]
say ["CR "(ord CR)]
say ["QU "(ord QU)]

(
say "= is_var"
\v=var_new
var_put v [1 2 3]
say (is_var v)
say (is_good v)
say (is_void v)
say (is_list v)
say (is_num v)
say (is_list (var_get v))
)

(
say "= str_bytes"
\str=(list_str; map chr; range 251 260)
say ["length is "(length str)]
each (str_bytes str)
	(\ch
	\n=(ord ch)
	say ["byte "n]
	)
)
