#
show_benchmark;
(
\try=
	(\path
	say ["path "path]
	say ["dir  "(dirname path)]
	nl
	)
try "a"
try "a/b/c"
try "a/b/c///"
try "../////"
try "////b/////"
try "a/b////c///"
try "aaa/bbb////ccc///"
)

(
\try=
	(\path
	say ["path "path]
	say ["base "(basename path)]
	nl
	)
try "a/b/c"
try "a/b/c///"
try "a/b/cde///"
try "a"
try ""
try "/a"
try "////a"
try "/"
)

(
if F (say (readlink "/proc/self/exe"))

if T (say "hi")
say (and T F)
say (mod 48 3)
say (mod 396398872 181115)
say (exp 1)
say pi
say tau
each ["a" "b"] say
say (date_normal "20170719")
say (quote ~ <b>x;"y"</b>~)
say_data (quote {~ <b>x;"y"</b>~ "b" "c"})
say_data (quote {"<br>" "a"})
say_data (quote ["<br>" "a"])
say (format_money 3874511.37)
say (hex_digit 14)

(
\try=(\x put_data x nl)
try ["<b>a</b>" { 1.2 3.8 "xxx"} T F]
)

(
\try=(\x put_quote_data x nl)
try ["<b>a</b>" { 1.2 3.8 "xxx"} T F]
try ["<b>a</b>" ~ tag "<br>"~ { 1.2 3.8 "xxx"} T F]
try ~ 1"2"3~
nl
)

# Test round-trip
(
\data=["a" QU (T 23 46) {1 2} [T F ~ "hi"~ void] -2.3]
\data=(append data data)

\str1=(as_str data)
say str1

\data=(str_to_data str1)
\str2=(as_str data)
say str2
say (eq str1 str2)
)
)

(
say "= test file_content"
\fh=(fopen (path_under dir_local "data.txt") "r")
\str=(file_content fh)
\str=(slice str 0 28)
put str
nl
)
(
say "= test file_bytes"
\source=(path_under dir_base "src/test/hello.fxl")
\fh=(fopen source "r")
\bytes=(file_bytes fh)
say (as_str bytes)
say (as_str bytes)
nl
)

(
\rows=
[
["a" "red" 42]
["b" "blue" 93]
["c" "orange" 2]
]

\get_color=(match_column 0 1 rows)
\get_qty=(match_column 0 2 rows)

\try=
	(\key
	\color=(get_color key)
	\qty=(get_qty key)
	say ["key "key" color "color" qty "qty]
	)

try "c"
try "a"
try "d"
try "b"
nl
)

(
\try=
	(\sep\list

	\str=(join sep list)

	put "sep   " put_data sep nl
	put "str   " put_data str nl

	\list=(split sep str)
	put "list  "put_data list nl

	\_str=(join sep list)
	if (ne str _str) (say ["BAD   "_str])
	nl
	)

\list=
[
""
"a"
"b"
~ "hi"~
""
""
"d"
"e"
""
]

try "/" list
try "[XYZ]" list

try "/" ["a" "b" "c"]
try "." ["a" "b" "c"]

try "" ["a"]
try "" []
try "" ["" ""]

try "/" ["" ""]
try "//" ["" "" ""]
)

(
# Demonstrate the equivalence of:
#   \x=D F
#   (\x F) D

( \x=(put "!" 4) say (+ x x) )
( (\x say (+ x x)) (put "!" 4) )

# Demonstrate the equivalence of:
#   \\x=D F
#   (\\x F) D

( \\x=(put "!" 4) say (+ x x) )
( (\\x say (+ x x)) (put "!" 4) )
)

(
tag ["td align=" "right"] (put "X")
tag "div class=a" (say "X")
_tag "div class=a" (put "X") nl
)

put_data (drop 4 (range 1 7)) nl

say (format_num 2 "," (put "!" 12345.67))
say (fexl_quote (put "!" "hello"))
say (uc (put "!" "abc"))
put_data (put "!" { 1 2 3 }) nl
say_data (put "!" ["a" "b" "c"])

\list=(str_chars "abc")
say_data list
say_data list
say_data void
say_data 32.8

say (make_url [])
say (make_url [{"color" "red"}])
say (make_url [{"color" "red"} {"other" ""} {"shape" "circle"}])
say (make_url
	[
	{ "color" "blue" }
	{
	~ key"!*'();:@&=+$,/?#[]%"1~
	~ val"!*'();:@&=+$,/?#[]%"1~
	}
	{ "=" "=" }
	]
	)

\x=
	(
	\alpha="abcdefghijklmnopqrstuvwxyz"
	to_str
	[
	":"
	alpha
	(uc alpha)
	"0123456789"
	]
	)

say x
say (uc x)
say (lc x)

say ["TAB "(ord TAB)]
say ["NL "(ord NL)]
say ["CR "(ord CR)]
say ["QU "(ord QU)]

(
say "= is_var"
\v=var_new
var_put v [1 2 3]
say (is_var v)
say (is_good v)
say (is_void v)
say (is_list v)
say (is_num v)
say (is_list (var_get v))
)

(
say "= str_bytes"
\str=(list_str; map chr; range 251 260)
say ["length is "(length str)]
each (str_bytes str)
	(\ch
	\n=(ord ch)
	say ["byte "n]
	)
)
(
say "= get_str"
\str="abcdefg"
\in=(readstr str)
\x=(get_str (sgetc in))
say_data x
)
(
say "= uri_escape"
\try=
	(\x
	\x=(to_str x)
	\y=(uri_escape x)
	\z=(uri_unescape y)

	say ["\x="(as_str x)]
	say ["\y="(as_str y)]
	say (eq z x "GOOD" "BAD")
	nl
	)

try ""
try "abc"
try ~ Hello (world) [\x="@"]!~
try NL
try
[
"a"
"b"
"c"
"_"
" "
" "
"!"
"*"
"'"
" "
"("
")"
";"
":"
"@"
"&"
"="
"+"
"$"
","
"/"
"?"
"#"
"["
"]"
"%"
"\"
QU
CR
NL
LF
" "
" "
"_"
"d"
"e"
"f"
]
)
(
say "= microtime"
\try=
	(\x\y
	\elapse=(subtract_microtime x y)
	say (as_str {x y elapse})
	)
\try=
	(\x\y
	try x y
	try y x
	)

try "1559751185778257" "1559751174778281"
try "1559751185778257" "1559751185778257"
)

(
say "= convert time"

\run=
	(
	\str_to_num
	\num_to_str

	\try=
		(\x
		\n=(str_to_num x)
		\y=(num_to_str n)

		say (as_str [x n y])
		)

	try "1970-01-01 00:00:00"
	try "1970-01-01 00:01:23"
	try "2020-05-31 23:59:59"
	try "2020-04-30 23:59:59"
	try "2020-04-30 23:59:59xyz"
	try "2020-04-30 23:59:69"
	)

run timegm gmtime

if F (run timelocal localtime) # Result depends on your local time zone.
)

(
\try=
	(
	\memo=cache \a memo a;
	say ["  1 : "a]
	\memo=cache \b memo b;
	say ["  2 : "b]
	\memo=cache \c memo c;
	say ["  3 : "c]
	)

\try=
	(\a\b\c
	say ["try "(as_str [a b c])]
	try a b c
	)

say "= cache"
try "a" "b" "c"
try "f" "e" "x"
try "s" "t" "e"
try "a" "b" "b"
try "a" "b" "c"
try "s" "t" "e"
try "a" "b" "c"
try "d" "c" "b"
try "d" "c" "c"
try "d" "a" "c"
try "d" "a" "d"
try "a" "b" "c"
try "x" "y" "z"
try "d" "c" "b"
try "d" "c" "b"
try "a" "x" "e"
)

(
say "== fetch"
\try=
	(
	\v=var_new
	\\v=(I v) # test eval of first arg
	\k
	say ["= try "(as_str k)]
	\x=
		(
		fetch v k;
		say "  compute"
		to_str [k":"k]
		)
	say ["  x = "(as_str x)]
	)

try (I I "a")
try "a"
try "b"
try "xyz"
try "a"
try "b"
try "xyz"
try 38.6
try void
try void
)

# Test import.
(
say "= import"
# Evaluate with alternative names.
\cx=
	(
	value;
	def "def" def;
	(value; std; use "test.fxl");
	\;
	\form
	def "div" div;
	def "test.show_hex" show_hex;
	def "test.show_str" show_str;
	form
	)

value;
cx;
\;
div
test.show_hex ""
test.show_hex "abcd"
test.show_hex "123"
test.show_str "abcd"
)

(
say "=="
\list=["a" ["b" ["c" {3 4} T [F T]] "d" [] "e" "f"]]
say (as_str list)
\list=(flatten list)
say (as_str list)

\table=
[
[11 12 13 14]
[15 16 17 18]
[19 20 21 22]
]

each (range 0 4) (\n say [n" "(as_str; column n table)])
)
