#!/bin/sh
verbose=0 ./build || exit

beg_test()
	{
	echo "["
	}

end_test()
	{
	local code=$?
	local status
	if [ $code -eq 0 ]; then
		status=good
	else
		status=bad
	fi
	echo "] $status"
	}

beg_test
../bin/test/internal
end_test

# Empty program
beg_test
(
echo -n "" | ../bin/fexl
) 2>&1
end_test

# Unclosed string
beg_test
(
cat <<'EOM' | ../bin/fexl

"x
EOM
) 2>&1
end_test

# Unclosed string
beg_test
(
cat <<'EOM' | ../bin/fexl
~| x
EOM
) 2>&1
end_test

# Incomplete string terminator
beg_test
(
echo -n "~ABCD" | ../bin/fexl
) 2>&1
end_test

# Unclosed parentheses
beg_test
(
cat <<'EOM' | ../bin/fexl
((x y)
EOM
) 2>&1
end_test

# Unclosed bracket
beg_test
(
cat <<'EOM' | ../bin/fexl
say
[
["x" "y"] [2 3]
EOM
) 2>&1
end_test

# Unclosed brace
beg_test
(
cat <<'EOM' | ../bin/fexl
# stuff
{x
y
EOM
) 2>&1
end_test

# Missing lambda symbol
beg_test
(
cat <<'EOM' | ../bin/fexl
\
EOM
) 2>&1
end_test

# Missing lambda symbol
beg_test
(
cat <<'EOM' | ../bin/fexl
\=(x y)
EOM
) 2>&1
end_test

# Missing definition
beg_test
(
cat <<'EOM' | ../bin/fexl
\x=(+ 2 3)
\y=
\z=(- 7 8)
EOM
) 2>&1
end_test

# Extraneous input
beg_test
(
cat <<'EOM' | ../bin/fexl
\x=(+ 2 3)
say (* x x)

)
EOM
) 2>&1
end_test

# Say "25"
beg_test
(
cat <<'EOM' | ../bin/fexl
\x=(+ 2 3)
say (* x x)
\\
Extra stuff down here not parsed.
EOM
) 2>&1
end_test

beg_test
(
../bin/fexl test/in/a1
) 2>&1
end_test

beg_test
cat <<'EOM' | ../bin/fexl test/in/a2
Hixåabc
dü≠m
EOM
end_test

beg_test
(
../bin/fexl test/in/utf8
) 2>&1
end_test

# undefined symbol
beg_test
(
cat <<'EOM' | ../bin/fexl
aa bb
c
EOM
) 2>&1
end_test

# out of stack
beg_test
(
ulimit -t 2
ulimit -v 20000
head -c 60000000 /dev/zero | tr "\000" '(' | ../bin/fexl
) 2>&1
end_test

# out of memory
beg_test
(
ulimit -t 2
ulimit -v 20000
head -c 60000000 /dev/zero | tr "\000" a | ../bin/fexl
) 2>&1
end_test

# out of time
beg_test
(
ulimit -t 1
ulimit -v 20000
head -c 300000000 /dev/zero | tr "\000" ' ' | ../bin/fexl
) 2>&1
end_test

# out of time
beg_test
(
ulimit -t 1
ulimit -v 20000
cat <<'EOM' | ../bin/fexl
\inf=(@\inf inf)
inf
EOM
) 2>&1
end_test

# out of stack
beg_test
(
ulimit -t 1
ulimit -v 200000
cat <<'EOM' | ../bin/fexl
@ @
EOM
) 2>&1
end_test

# Very slowly runs out of memory, so we limit time instead.
beg_test
(
ulimit -t 1
ulimit -v 20000
cat <<'EOM' | ../bin/fexl
\I=(\x x)
\S=(\x\y\z x z; y z)
\L=(\x\y\z x z y)
\R=(\x\y\z x; y z)
\y0=(L R (S I I))
\Y=(S y0 y0)
Y I
EOM
) 2>&1
end_test
