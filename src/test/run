#!/bin/sh
./build || exit
. ./safe

run_fexl()
	{
	local file="$1"
	echo -n "===="
	if [ "$file" != "" ]; then echo -n " $file"; fi
	echo
	../bin/fexl $file 2>&1
	echo "exit $?"
	}

run_fexl test/a1.fxl

(
cat <<"EOF"
abc
defg

hij
åabcüdef
üä 1≠0 包子
EOF
) | run_fexl test/a2.fxl

# Test stdout versus stderr.
echo "== stdout:"
../bin/fexl test/a3.fxl 2>&1 2>/dev/null
echo "== stderr:"
../bin/fexl test/a3.fxl 2>&1 1>/dev/null

run_fexl test/a4.fxl
run_fexl test/a5.fxl
run_fexl test/a6.fxl
run_fexl test/a7.fxl
run_fexl test/a8.fxl
run_fexl test/a9.fxl
run_fexl test/b10.fxl
run_fexl test/b11.fxl
run_fexl test/b12.fxl
run_fexl test/b13.fxl
run_fexl test/b14.fxl
run_fexl test/b15.fxl
run_fexl test/b16.fxl
run_fexl test/b17.fxl
run_fexl test/b18.fxl
run_fexl test/b19.fxl
run_fexl test/b20.fxl
run_fexl test/chars.fxl
run_fexl test/date.fxl
run_fexl test/sat.fxl
run_fexl test/crypto.fxl

(
cat <<"EOF"
abcABC
jjja小
åüä≠
包子
EOF
) | run_fexl test/get_byte.fxl

# Test the "die" function.
(
cat <<"EOF"
say "hi"
die
say "bye"
EOF
) | run_fexl

# Test some syntax errors.

echo -n "\"" | run_fexl

echo -n '
"a
b' | run_fexl

echo -n "~| a" | run_fexl

echo -n "

~END
abc~EN" | run_fexl

echo -n "~" | run_fexl

echo -n "~
" | run_fexl

echo -n "~EN" | run_fexl

echo -n " = y" | run_fexl

echo -n "ab cd e\\" | run_fexl

echo -n "\\x=" | run_fexl

echo -n "(
a
(b" | run_fexl

echo -n "(
a
(b)" | run_fexl

echo -n "[
a
[b" | run_fexl

echo -n "{
a
{b" | run_fexl

echo -n "(ab cd e)
)" | run_fexl

(
cat <<"EOF"
say (+ 4 6)
( a b c ) ( b c d )
( a b c ) ( b c d )
put (- 12 7.2) nl
x
EOF
) | run_fexl

(
cat <<"EOF"
evaluate (define "b" (say "b"); void) \; a b
a c
c
EOF
) | run_fexl

run_fexl missing.fxl

(
cat <<"EOF"
parse_file "missing.fxl"
EOF

) | run_fexl

# Here I test setting ulimit to terminate misbehaving programs promptly.
test_misbehavior=false
# To enable the test, unpound the next line.
#test_misbehavior=true

if $test_misbehavior; then

(
ulimit -St 1
echo -n "@ I" | run_fexl
# CPU time limit exceeded
)

(
ulimit -Ss 1000
echo -n "@ @" | run_fexl
# Stack overflow (Segmentation fault)
)

(
ulimit -Sv 100000
echo -n "\S=(\x\y\z x z; y z) @ S S S" | run_fexl
# The program ran out of memory.
)

fi

exit 0
