#!/bin/sh
./build || exit
. ./safe

run_fexl()
	{
	local file="$1"
	echo "===="
	../bin/fexl $file 2>&1
	echo "exit $?"
	}

run_fexl test/a1.fxl

(
cat <<"EOF"
abc
defg

hij
åabcüdef
üä 1≠0 包子
EOF
) | run_fexl test/a2.fxl

# Test sending output to stderr.
(
cat <<"EOF"
say "hello"
put_to_error
	(
	\x=(+ 4 3)
	say "This goes to stderr."
	put "x = " put x nl
	)
say "bye"
EOF
) | run_fexl

# Test the "die" function.
(
cat <<"EOF"
say "hi"
die
say "bye"
EOF
) | run_fexl

# Test some syntax errors.

echo -n "\"" | run_fexl

echo -n '
"a
b' | run_fexl

echo -n "~| a" | run_fexl

echo -n "

~END
abc~EN" | run_fexl

echo -n "~" | run_fexl

echo -n "~
" | run_fexl

echo -n "~EN" | run_fexl

echo -n " = y" | run_fexl

echo -n "ab cd e\\" | run_fexl

echo -n "\\x=" | run_fexl

echo -n "(
a
(b" | run_fexl

echo -n "(
a
(b)" | run_fexl

echo -n "[
a
[b" | run_fexl

echo -n "{
a
{b" | run_fexl

echo -n "(ab cd e)
)" | run_fexl

echo -n "x
y
	(z z y)
" | run_fexl

echo -n "\=
" | run_fexl

(
cat <<"EOF"
\=(\x eq x "b" {(say "b")} void) a b
c
EOF
) | run_fexl

run_fexl missing.fxl

# Here we test setting ulimit to terminate misbehaving programs promptly.
test_misbehavior=false
# To enable the test, unpound the next line.
#test_misbehavior=true

if $test_misbehavior; then

(
ulimit -St 1
echo -n "@ I" | run_fexl
# CPU time limit exceeded
)

(
ulimit -Ss 1000
echo -n "@ @" | run_fexl
# Stack overflow (Segmentation fault)
)

(
ulimit -Sv 100000
echo -n "\S=(\x\y\z x z; y z) @ S S S" | run_fexl
# The program ran out of memory.
)

fi

exit 0
