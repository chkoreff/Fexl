# Test standard context.

\test_context==
(\context

evaluate context \;
\try=
	(\name
	\f=(standard name)
	say ["name "name" : "(is_defined f)]
	)

try "say"
try "is_defined"
try "standard"
try "+"
try "@"
try "define"
try "if"
try "each"
try "div"
try "show_list"
try "use_file"
try "use_lib"
try "use"
try "void"
try "dirname"
try "hex_digit"
try "read_ssv_file"
try "read_csv_file"
try "2.5"
try "0"
try "-3.56"
try "-3.56e-4"
try "-3.56e-4x"
try "x"
)

say "== test_full_context"
test_context
	(
	use "test.fxl";
	use_lib "date.fxl";

	use_lib "read_ssv.fxl";
	use_lib "read_csv.fxl";

	use_lib "html.fxl";

	standard
	)

say "== test_restricted_context"
test_context
	(
	define "say" say;
	define "is_defined" is_defined;
	void
	)

(
say "== test_dynamic_context"

# This context defines 5 available functions.
\context=
	(
	define "say" say;
	define "seed_rand" seed_rand;
	define "rand" rand;
	define "fred" (say "I am Fred.");
	define "wilma" (say "I am Wilma.");
	void
	)

# The get function looks up a key in the context and dies if not defined.
\get=
	(\key
	\def=(context key)
	is_void def (error ["Undefined symbol "key]);
	def
	)

# Now I evaluate some code in a context which defines only the "get" function.
# Not even "standard" is defined.  The code must explicitly get every single
# function it wants to use.
evaluate
(
define "get" get;
with "standard" (error "Undefined symbol standard");
void
) \;

get "say" \say
get "seed_rand" \seed_rand
get "rand" \rand
#get "barney" \barney # This would be an error.
get "fred" \fred
get "wilma" \wilma

#\x==standard # Can't refer to standard here.

seed_rand 0.1964
fred
say rand
say rand
wilma
)
