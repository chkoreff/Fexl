#use_new_syntax
\\cx=(value; std; use "lib/b15/context.fxl")
value; std; cx; \;

# Sort unique pairs, keeping the latest one.
\\sort_pairs=(combine_keys (\x\y y))

# Compare values.
\eq_val=
	(\x\y
	is_undef x (is_undef y);
	is_undef y F;
	eq x y
	)

# Compare lists of string pairs.
\\eq_pairs=
	(@\loop\xs\ys
	xs (ys T \_\_ F) \x\xs
	ys F \y\ys

	x \kx\vx
	y \ky\vy

	ne kx ky F;
	ne vx vy F;
	loop xs ys
	)

# (index_do index pairs)
# Add or delete a list of {key val} pairs.
\\index_do=
	(@\loop\index\pairs
	pairs index \pair\pairs
	pair \key\val
	\\index=
		(
		is_defined val
			(index_put key val)
			(index_del key)
			index
		)
	loop index pairs
	)

\test_pairs=
	(\pairs

	# Get the expected list of {key val} pairs to check.
	\\check_pairs=(sort_pairs pairs)

	# Create the index.
	\\index=(index_do [] pairs)

	# Ensure that the list of pairs in the index is correct.
	(
	\\ok=
		(
		# Get the list of pairs defined in the index.
		\list_pairs=(index_pairs index)
		# Get the expected list of defined pairs.
		\expect_pairs=(filter (\p p \_ is_defined) check_pairs)
		# Ensure that they're equal.
		eq_pairs list_pairs expect_pairs
		)

	put "pairs: "
	say (ok "GOOD" "BAD")
	)

	# Ensure that index_get matches the values in check_pairs.
	(
	\\get_errors=
		(@\loop\pairs
		pairs [] \pair\pairs
		pair \key\val
		\\val2=(index_get key index)
		eq_val val val2
			(loop pairs)
			[{key val val2}; loop pairs]
		)

	put "get: "
	\errors=(get_errors check_pairs)
	is_null errors
		(say "GOOD")
		(
		say "ERRORS:"
		say_errors errors
		)
	)
	)

\test_0249=
	(
	say "= test_0249"

	\\index=
	(
	index_do []
	[
	{"bcccxyz" "4954"}
	{"a" "6870"}
	{"d" "1974"}
	{"" "3972"}
	{"bcccxyz" "3364"}
	{"bcccxyza" "3291"}
	{"bcccxyzabc" "3291"}
	{"" "9972"}
	{"bcccxyza" "4610"}
	{"bcccxyzb" "2173"}
	{"bccc" "6247"}
	{"bcda" "0724"}
	{"bc" "9381"}
	{"bc" void}
	{"bccc" "5233"}
	{"bcccda" "1618"}
	{"bcqr" "1889"}

	{"bccd" "7422"}

	{"bx" void}
	{"bcc" void}
	{"bca" void}
	{"bcccz" void}
	{"bcccxyzabcx" void}
	{"bccd" void}
	{"bcccdb" void}
	]
	)

	(
	say "index:"
	say_index index

	say "pairs:"
	\\pairs=(index_pairs index)
	say_pairs pairs
	)

	# Test delete.
	say "delete:"
	\\index=
	(
	index_do index
	[
	# Add a couple keys first to make it interesting.
	{"bc" "9941"}
	{"abcdefg" "6674"}
	# Now delete.
	{"x" void}
	{"c" void}
	{"bc" void}
	{"b" void}
	{"bccc" void}
	{"bcc" void}
	{"bcccxyza" void}
	{"bcccxyzb" void}
	{"bcda" void}
	{"bcccxyz" void}
	{"bcccxyzabc" void}
	{"bcccxyzzzz" void}
	{"bcqr" void}
	{"bcccda" void}
	{"abcdefh" void}
	{"a" void}
	{"" void}
	{"d" void}
	]
	)

	say_index index
	)

\test_5437=
	(
	say "= test_5437"
	test_pairs
	[
	{"123456" "v1_123456"}
	{"" "5763"}
	{"a" "4999"}
	{"a" "4999"}
	{"abc" "4113"}
	{"mnog" "0053"}
	{"mnof" "1285"}
	{"123456" "v2_123456"}
	{"def" "7249"}
	{"abcd" "2174"}
	{"xyz" "4113"}
	{"mnof" "1286"}
	{"xy" "2113"}
	{"fghj" "3674"}
	{"fghi" "5851"}
	]
	)

\test_8924=
	(
	say "= test_8924"
	test_pairs
	[
	{"abcd" "2174"}
	{"abc" "4113"}
	{"a" "4998"}
	]
	)

\test_3650=
	(
	say "= test_3650"
	test_pairs
	[
	{"123456" "v1_123456"}
	{"" "5763"}
	{"a" "4999"}
	{"a" "4999"}
	{"abc" "4113"}
	{"mnog" "0053"}
	{"mnof" "1285"}
	{"123456" "v2_123456"}
	{"def" "7249"}
	{"abcd" "2174"}
	{"xyz" "4113"}
	{"mnof" "1286"}
	{"xy" "2113"}
	{"fghj" "3674"}
	{"fghi" "5851"}
	]
	)

\test_6051=
	(
	say "= test_6051"

	\\index=
	(
	index_do []
	[
	{"" "3785"}
	{"aaaabc" "9114"}
	{"aaabcc" "2014"}
	{"aaabcd" "7679"}
	{"aaacde" "3161"}
	{"bbabc" "4682"}
	{"bbabd" "1863"}

	{"bbacde" "6455"}
	{"bbacd" "1553"}
	{"bbac" "8261"}

	{"bbacdf" "3986"}
	{"bbacef" "9370"}
	{"e" "1067"}

	{"" "3785"}
	{"aa" "8059"}
	{"aaaabc" "9114"}
	{"aaabcc" "2014"}
	{"aaabcd" "7679"}
	{"aaacde" "3161"}
	{"bbabc" "4682"}
	{"bbabd" "1863"}
	{"bbac" "8259"}
	{"bbacde" "6455"}
	{"bbacd" "1553"}
	{"bbacdf" "3986"}
	{"bbacef" "9369"}
	{"cab" "1546"}
	{"cac" "7869"}
	{"cacd" "1055"}
	{"e" "1067"}

	{"bbac" "8260"}
	{"bbacef" "9370"}
	{"aa" "8060"}
	{"bbac" "8261"}

	{"" "3785"}
	{"aaaabc" "9114"}
	{"aaabcc" "2014"}
	{"aaabcd" "7679"}
	{"aaacde" "3161"}
	{"bbabc" "4682"}
	{"bbabd" "1863"}
	{"bbac" "8261"}
	{"bbacd" "1553"}
	{"bbacde" "6455"}
	{"bbacdf" "3986"}
	{"bbacef" "9370"}
	{"cab" "1546"}
	{"cac" "7869"}
	{"cacd" "1055"}
	{"e" "1067"}

	{"abcdefg" "0825"}
	{"abcdef" "2039"}
	{"abcde" "7596"}
	{"abcd" "2936"}
	{"abc" "7010"}
	{"bba" "1569"}
	]
	)

	say "before delete:"
	say_index index

	say "pairs:"
	say_pairs (index_pairs index)
	nl

	\\index=
	(
	index_do index
	[
	{"d" void}
	{"bb" void}

	{"bbx" void}
	{"aaaax" void}

	{"bbacdf" void}
	{"bbacde" void}

	{"bbac" void}

	{"ca" void}
	{"bbacd" void}
	{"abcd" void}
	{"abcdef" void}
	{"abcde" void}
	{"abcdefg" void}
	{"" void}

	{"aaabcc" void}
	{"aaabcd" void}
	{"aa" void}
	{"abc" void}
	{"aaacdx" void}
	{"aaacde" void}

	{"aaaab" void}
	{"aaaabcx" void}
	{"aaaabc" void}

	{"x" void}
	{"e" void}

	{"cab" void}
	{"cacd" void}
	]
	)

	say "after delete:"
	say_index index

	say "pairs:"
	say_pairs (index_pairs index)
	nl
	)

\test_3215=
	(
	say "= test_3215"
	test_pairs
	[
	{"" void}
	{"a" void}
	{"aaabce" void}
	{"bbacx" void}
	{"x" void}
	]
	)

\test_0236=
	(
	say "= test_0236"
	test_pairs
	[
	{"" "3785"}
	{"aaaabc" "9114"}
	{"aaabcc" "2014"}
	{"aaabcd" "7679"}
	{"aaacde" "3161"}
	{"bbabc" "4682"}
	{"bbabd" "1863"}

	{"bbacde" "6455"}
	{"bbacd" "1553"}
	{"bbac" "8261"}

	{"bbacdf" "3986"}
	{"bbacef" "9370"}
	{"e" "1067"}

	{"" "3780"}
	{"aa" "8060"}
	{"aa" "8059"}
	{"aaaabc" "9114"}
	{"aaabcc" "2014"}
	{"aaabcd" "7679"}
	{"aaacde" "3161"}
	{"bbabc" "4682"}
	{"bbabd" "1863"}
	{"bbac" "8259"}
	{"bbacde" "6455"}
	{"bbacd" "1553"}
	{"bbacdf" "3986"}
	{"bbacef" "9369"}
	{"cab" "1546"}
	{"cac" "7869"}
	{"cacd" "1055"}
	{"e" "1067"}

	{"bbac" "8260"}
	{"bbacef" "9370"}
	{"aa" "8060"}
	{"bbac" "8261"}

	{"" "3785"}
	{"aaaabc" "9114"}
	{"aaabcc" "2014"}
	{"aaabcd" "7679"}
	{"aaacde" "3161"}
	{"bbabc" "4682"}
	{"bbabd" "1863"}
	{"bbac" "8261"}
	{"bbacd" "1553"}
	{"bbacde" "6455"}
	{"bbacdf" "3986"}
	{"bbacef" "9370"}
	{"cab" "1546"}
	{"cac" "7869"}
	{"cacd" "1055"}
	{"e" "1067"}

	{"abcdefg" "0825"}
	{"abcdef" "2039"}
	{"abcde" "7596"}
	{"abcd" "2936"}
	{"abc" "7010"}
	{"bba" "1569"}

	{"abcc" void}
	{"x" void}
	{"def" void}

	{"bb" void} # new_key is a proper prefix of old_key
	{"bbabcx" void}

	# Test share common proper prefix:
	{"bbx" void} # pos 0
	{"aaaax" void} # pos 3
	]
	)

# Generate a list of {key val} pairs with an iterated seed.
\gen_pairs=
	(\iterate @\loop\n\seed
	lt n 1 [];
	iterate seed \key\val\seed
	\\n=(- n 1)
	\\tail=(loop n seed)
	[{key val}; tail]
	)

\test_3517=
	(
	say "= test_3517"

	\\pairs=
		(
		gen_pairs
		(\seed
		\\seed=(sha256 seed)
		\\q_seed=(unpack seed)
		\\key=(slice q_seed 0 16)
		\\val=(slice q_seed 16 4)
		{key val seed}
		)
		1000
		"start"
		)

	# Add a few more keys to test override.
	\pairs=
	[
	{"abc" "1027"}
	{"abc" "2866"}

	{"bcccxyz" "4954"}
	{"a" "6870"}
	{"d" "1974"}
	{"" "3972"}

	{"bcccxyz" "3364"}
	{"bcccxyza" "3291"}
	{"bcccxyzabc" "3291"}
	{"" "9972"}
	{"bcccxyza" "4610"}
	{"bcccxyzb" "2173"}

	{"bccc" "6247"}
	{"bcda" "0724"}

	{"bc" "9381"}
	{"bccc" "5233"}
	{"bcccda" "1618"}
	{"bcqr" "1889"}

	;pairs
	]

	test_pairs pairs
	)

# Test rendering errors.
\test_2744=
	(
	say "= test_2744"
	say_errors
	[
	{"d" "1974" void}
	{"bccc" "5233" "9999"}
	{"bcccxyz" "3364" void}
	]
	)

show_benchmark;
test_0249
test_5437
test_8924
test_3650
test_6051
test_3215
test_0236
test_3517
test_2744
