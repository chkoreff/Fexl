# Test the extend function.

\\test_0=
(
\try=
	(
	\\cx=(say "Evaluating the context." cx_std)
	\\form
	\\form=(say "Evaluating the form." form)
	\result=(extend cx form)
	say ["result "(is_undef result "void" "ok")]
	nl
	)

say "== test_0"
show_benchmark;

# Test with bad form.
try 3
# Test good.
try (\; say "Hello")
)

\\test_1=
(
say "== test_1"
show_benchmark;

extend
	(
	say "Evaluating the context."
	define "F" F;
	define "if" if;
	define "fred" (say "I am Fred.");
	cx_std
	)
	(
	say "Evaluating the form."
	\;
	# Extend cx_std several times.
	extend cx_std \;
	extend cx_std \;
	extend cx_std \;

	if F cx_std
	fred
	)
)

\\test_2=
(
say "== test_2"
show_benchmark;

# Test fancy extended standard context.
extend
(
# Define cx_std to include a few extra functions.
say "Evaluating the context."
\speaker=(\name \x put name put " says " say x)
define "fred" (speaker "Fred");
define "wilma" (speaker "Wilma");
define "goodbye" (say "Goodbye");
cx_std
);

say "Evaluating the form."
\;
# Now override one of the definitions.  Not extending this time.
evaluate
(
define "fred" (put "HEY: " fred);
cx_std
)
\;

# Now run this program in the enhanced context.
say "Hi"
say (+ 32 (* 5 5))
say (is_void void)
fred "a"
wilma "b"
goodbye
)

test_0
test_1
test_2
