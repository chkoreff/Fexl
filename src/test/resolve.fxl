# Test context.

\\test_0=
(
\try=
	(\\form
	\\form=(say "Evaluating the form." form)
	\result=(evaluate form)
	say ["result "(is_undef result "void" "ok")]
	nl
	)

say "== test_0"
show_benchmark;

# Test with bad form.
try 3
# Test good.
try (\; say "Hello")
)

\\test_1=
(
say "== test_1"
show_benchmark;

guard;
define "fred" (say "I am Fred.")

say "Evaluating the form."
evaluate \;
evaluate \;
evaluate \;
evaluate \;

if F define
fred
)

\\test_2=
(
say "== test_2"
show_benchmark;

# Define a few extra functions.
guard;
\speaker=(\name \x put name put " says " say x)
define "fred" (speaker "Fred")
define "wilma" (speaker "Wilma")
define "goodbye" (say "Goodbye")

say "Evaluating the form."
evaluate \;
# Now override one of the definitions.
define "fred" (put "HEY: " fred)

evaluate \;

# Now run this program in the enhanced context.
say "Hi"
say (+ 32 (* 5 5))
say (is_void void)
fred "a"
wilma "b"
goodbye
)

\\test_3=
(
# Illustrate how dynamic loading could be done with resolve.
say "== test_3"

\check_resolve=
	(\\body\form
	is_closed form form;
	body
	resolve form
	)

\define=(\key say [": define "key] define key)

\evaluate=
	(\form
	nl
	say "= evaluate"
	restrict;

	evaluate;
	check_resolve
		(
		define "fred" (say "I am Fred.")
		define "wilma" (say "I am Wilma.")
		);
	check_resolve
		(
		define "say" say
		);
	form
	)

(
evaluate \;
say "Hello."
fred wilma
)
(
evaluate \;
say "Hello."
)

say_data (evaluate \; [1 2 3])
)

test_0
test_1
test_2
test_3
