#
\show=(\x say; is_bad x ":bad" x)
\bool=(\x x "T" "F")

\div=(later; say "==")

\show_data=
(\x
\x=x
is_str x (put "str " put x nl);
is_num x (put "num " put x nl);
is_bad x (say "bad");
say "other"
)

(
\ping=(later; say "ping")
div
ping
div
I ping

div
\talk=(later; ping)
\talk=(later; talk talk talk)
\talk=(later; talk talk)
\talk=(later; talk talk)
talk
)

# LATER test eval with limits
# limit (@ I) 6000 1000
# limit (@ @) 1000000 54
# limit (Y S S S) 1000000 60
# limit (@ @) 4000000 4000000  # too deep on stack

div
show "abc"
show (I "abc")
show ("abc" "de")
show (. "abc" "de")
show (I (I "abc") "de")
show (. (I "abc") "de")
show (. ((\x\y x) "abc") "de")
show (. (I I "abc") (. "" "de"))

show 3.14159265358979
show 42
show (length "12345")
show (length (. (I "abc") (. "" "d")))
show (slice (T (. "abcd" "efghi") I) 2 5)

show (+ -14.87 482.73)
show ((/ ((+ 1) (sqrt 5))) 2)

show (bool; ge (I 5.9) 5.8)
show (bool; lt 5.9 (I 5.8))
show (bool; ge (I "ab") "a")
show (bool; lt (I "ab") (I "a"))
show (bool; eq (I "x") "x")
show (bool; eq (I -7.2) -7.2)
show (bool; lt (I 5.9) (I "ab"))
show (bool; lt (I "ab") (I 5.9))
show (bool; eq (I T) (I T))
div

show_data (num_str; / (+ 1 (sqrt 5)) 2)
show_data (str_num; . "+"; . "1." "61803398874989")
show_data bad
show_data (I I)
show_data (str_num (I 5.8))
show_data (str_num (I T))
show_data (num_str 5.8)
show_data (num_str "abc")
show_data (sqrt 9)
show_data (sqrt "abc")
show_data (+ "x" (I 3) 4)
show_data (length "abc")
show_data (length F)

div
show (bool; is_num; str_num "-4.6")
show (bool; is_num; str_num "-4.6x")
show (bool; is_bad; str_num "-4.6")
show (bool; is_bad; str_num "-4.6x")

div
show (bool; is_bad I)
show (bool; is_bad 3)
show (bool; is_bad bad)
show (bool; is_num; str_num "-4.6")
show (bool; is_num; str_num "-4.6x")
show (bool; is_bad; str_num "-4.6")
show (bool; is_bad; str_num "-4.6x")

div
show (slice "abcd" 2 3)
show (slice "abcd" 2 2)
show (slice "abcd" 2 0)
show (slice "abcd" -2 3)
show (slice "abcd" 2 -3)

div
#show (length I)
show (bool; is_str I)
show (bool; is_str 4)
show (bool; is_str "x")
show (bool; is_str; . "x" "y")
show (bool; is_num "x")
show (bool; is_num 4.2)
show (bool; is_num (* 3.9 4.2))
show (bool; is_num; str_num "4.87")
show (bool; is_num; str_num "  4.87")

# The str_num function allows leading white space, but forbids any trailing
# invalid chars, including white space.  This reflects how strtod works.
show (bool; is_num; str_num " 4.87 ")
show (bool; is_num; str_num "4.87x")

# Test some tricky string terminators.
say ~ABC abcdABAABC
say ~ABCD AABABCABCD

div

# Test parse_string.
(
\try=
(\x
put "parse " put "[" put x put "]" nl
parse_string x
	(\form say "ok")
	(\msg\line
	put "err " put msg put " on line " say line
	)
nl
)

try ""
try "
x y"
try "ab cd e"
try "abcdefghi;"
try ~| ""|
try ~| "a"|
try ~| "abc
defg"|

try ~|
"|

try ~|

"a
b
|

try ~END ~| |END
try ~END ~| a|END
try ~END ~| aEND
try ~@ ~END aEND@

try ~@

~END
abcEN@

try "~"
try "~EN"

try "~ABC abcdABAABC"
try "~ABCD AABABCABCD"

try " = y"
try "ab cd e;"
try "ab cd e;f g"
try "ab cd e;f g ; hi j;"
try "ab cd e\\fg h"
try "ab cd e\x"
try "ab cd e\"
try "\x="
try "\x=4"
try "\x\y\z x z; y z"
try "\x\y\z x; y z"
try "\x\y\z x z y"
try "\x x"
try "\x\y x"
try "\x x x"
try "\x=y x"
try "\x=y y"
try "\y\x=y x x"
try "\y\x=y y y"
try "()"

try "(
a
(b"

try "(
a
(b)"

try "(
a
(b))"

try "(ab cd e)
)"

try ~@ say "hello"
say something
@

)

# Test parse_file.
(
\try=
(\x
put "parse " put x nl
parse_file x
	(\form say "ok")
	(\msg\line
	put "err " put msg put " on line " say line
	)
nl
)

try "missing.fxl"
try "test/a2.fxl"
)

# Test delayed and single evaluation.
div
\x=
	(
	once;
	put "(CALC)"
	* 5 6
	)

\show_x=
	(
	later;
	put "x = " say x
	)

say "["
show_x
show_x
show_x
show_x
say "]"

div
eval_file "test/utf8.fxl"
