#
extend (extend std; use "test.fxl") \;

\show=
	(\x
	\type=(\t put [t " "] say x)
	is_str x (type "str");
	is_num x (type "num");
	is_bool x (type "bool");
	is_undef x (say "void");
	say "other"
	)

\eval_file=(\name value std; use name)
\eval_str=(\str value std; parse str "")

(
\\ping=(say "ping")
div
ping
div
I ping

div
\\talk=(ping)
\\talk=(talk talk talk)
\\talk=(talk talk)
\\talk=(talk talk)
talk

div
# Should say PING six times.
\\ping=(say "ping")
\\other=(\= ping)
\\talk=(ping other)
talk
talk
talk
talk
ping
)

div
show "abc"
show (I "abc")
show ("abc" "de")
show (. "abc" "de")
show (I (I "abc") "de")
show (. (I "abc") "de")
show (. ((\x\y x) "abc") "de")
show (. (I I "abc") (. "" "de"))
show void
show 3.14159265358979
show 42
show (length "12345")
show (length (. (I "abc") (. "" "d")))
show (slice (T (. "abcd" "efghi") I) 2 5)

show (+ -14.87 482.73)
show ((/ ((+ 1) (sqrt 5))) 2)

show (ge (I 5.9) 5.8)
show (lt 5.9 (I 5.8))
show (ge (I "ab") "a")
show (lt (I "ab") (I "a"))
show (eq (I "x") "x")
show (eq (I -7.2) -7.2)
show (lt (I 5.9) (I "ab"))
show (lt (I "ab") (I 5.9))
show (eq (I T) (I T))
div

show (num_str; / (+ 1 (sqrt 5)) 2)
show (str_num; . "+"; . "1." "61803398874989")
show (I I)
show (str_num (I 5.8))
show (str_num (I T))
show (num_str 5.8)
show (num_str "abc")
show (sqrt 9)
show (sqrt "abc")
show (+ "x" (I 3) 4)
show (sqrt "abc" 25)
show (length "abc")
show (length F)
show (str_num "42")
show (str_num "42x")
show (str_num "-7.8")
show (str_num "0")
show (str_num "-0")
show (+ (str_num "1"); str_num; num_str; str_num "42.8")

# Test slice.
(
div
show (slice "" 0 0)
show (slice "" 0 7)
show (slice "" 1 2)
div
show (slice "a" 0 1)
show (slice "a" 1 1)
show (slice "a" 2 1)
div
show (slice "abcd" 0 0)
show (slice "abcd" 0 1)
show (slice "abcd" 0 2)
show (slice "abcd" 0 3)
show (slice "abcd" 0 4)
show (slice "abcd" 0 5)
div
show (slice "abcd" 1 0)
show (slice "abcd" 1 1)
show (slice "abcd" 1 2)
show (slice "abcd" 1 3)
show (slice "abcd" 1 4)
div
show (slice "abcd" 2 0)
show (slice "abcd" 2 1)
show (slice "abcd" 2 2)
show (slice "abcd" 2 3)
div
show (slice "abcd" 3 0)
show (slice "abcd" 3 1)
show (slice "abcd" 3 2)
div
# Negative cases return void.
show (slice "abcd" -2 3)
show (slice "abcd" 2 -3)
show (slice "" -1 2)
show (slice "abc" -1 -2)
)

# Test search.
(
div
\try=(\x\y\offset show (search x y offset))

# These cases agree with the Perl "index" function.  Where Fexl returns void,
# Perl returns -1.
try "abcdefg" "de" 0 # 3
try "abcdefg" "cde" 0 # 2
try "abcdefg" "cdx" 0 # void
try "abcdefg" "cde" 2 # 2
try "abcdefg" "cde" 3 # void
try "abcdefg" "de" 2 # 3
try "abcdefg" "de" 3 # 3
try "abcdefg" "de" 4 # void
try "" "a" 0 # void
try "" "" -1 # void
try "abcdefghijklmnop" "" 0 # 0
try "abcdefghijklmnop" "" 7 # 7
try "abcdefghijklmnop" "" 15 # 15
try "abcdefghijklmnop" "ghI" 0 # void
try "abcdefghijklmnop" "ghi" 0 # 6
try "abcdefghijklmnop" "mnop" 0 # 12
try "abcdefghijklmnop" "mnopq" 0 # void
try "abcdefghijklmnop" "p" 0 # 15
try "abcdefghijklmnop" "q" 0 # void
try "abcdefghijklmnop" "abcdefghijklmnop" 0 # 0
try "abcdefghijklmnop" "abcdefghijklmnop" 1 # void
try "abcdefghijklmnop" "abcdefghijklmnopq" 0 # void
try "a" "ab" 0 # void
try "a" "a" 0 # 0

# These cases diverge from the Perl "index" function.  Fexl returns void, but
# Perl shows a match at position 0.  The difference is because str_search does
# not use -1 to indicate not found, since I use unsigned longs.  Instead, it
# returns a position which points beyond the end of the subject string, and
# when the subject string is empty, any value does that.  I find this
# difference acceptable.
try "" "" 0 # void
try "" "" 8 # void
)

(
say "== test char_width"

# Return the list of UTF-8 chars starting from the given position.
\str_chars=
	(\str @\\loop\pos
	ge pos (length str) [];
	\n=(char_width str pos)
	\ch=(slice str pos n)
	[ch; loop (+ pos n)]
	)

\str="hej åabcüdef üä 1≠0 包子x"
\list=(str_chars str 0)

say ["str " str]
each list (\ch say ["ch " ch])
)

(
say "== test buf"
\buf=buf_new
\put=(buf_put buf)
\\get=(say [": " (buf_get buf)])
put "abc"
put "defg"
get
get
put "abc"
put "d"
put ""
put ""
put "e"
get
put "tuvwxyz"
get

say (to_str [T T F (F T F) ["ab" "c "] [[] [] ""] [2.3 " " -3.8] " defg"])
)

div
show (is_str I)
show (is_str 4)
show (is_str "x")
show (is_str; . "x" "y")
show (is_num "x")
show (is_num 4.2)
show (is_num (* 3.9 4.2))

div
# Numbers cannot have extraneous white space or other characters.
show (is_num; str_num "4.87")
show (is_num; str_num "  4.87")
show (is_num; str_num " 4.87 ")
show (is_num; str_num "4.87x")
show (is_num; str_num "-4.6")
show (is_num; str_num "-4.6x")

# Test some more good and void cases.
div
show void
show (void 3)
show (length 3)
show (length "abc")
show (length 3 "abc")
show (lt 3 4)
show (lt 3 "4")
show (lt 3 "4" "5")
show (+ "x" 4)
show (+ "x" 4 5)
show (sqrt 16)
show (sqrt "x")
show (sqrt "x" 16)
show 3
show (3 "x")
show (num_str 42)
show (num_str "abc")
show (num_str "abc" 42)
show (is_void void)
show "abc"
show ("abc" "x")
show (. "abc" "de")
show (. 3 "de")
show (. 3 "de" "fg")
show (length "abc")
show (length 27)
show (length 27 "abc")
show (slice "abcdefg" 3 2)
show (slice "abcdefg" 3 5)
show (slice "abcdefg" -3 5)
show (slice "abcdefg" "3" 5)
show (str_num "42")
show (str_num "42x")
show (str_num 42)

div
# Test some tricky string terminators.
say ~ABC abcd~ABA~ABC
say ~ABCD AAB~ABC~ABCD

# Multiple layers of quotation.
say "hello"
say ~(1) "hello"~(1)
say ~(2) ~(1) "hello"~(1)~(2)
say ~(3) ~(2) ~(1) "hello"~(1)~(2)~(3)

say ~ "Ain't nothin' simple when you're doin' it for real." (Gus Baird)~
nl
say ~
"My fathers sleep on the sunrise plains,
And each one sleeps alone.
Their trails may dim to the grass and rains,
For I choose to make my own.
I lay proud claim to their blood and name,
But I lean on no dead kin;
My name is mine, for the praise or scorn,
And the world began when I was born
And the world is mine to win. ..."

  (Badger Clark, "The Westerner")
~

# Test single evaluation.
(
div
\\show=
	(
	(\=say "(CALC)")
	\x=(* 5 6)
	say ["x = " x]
	)

say "["
show
show
show
show
say "]"

(
\\x=(\=put "(CALC)" + 2 (* 7 6))

\make_square=
	(\x
	yield;
	(\=put ["square " x "="])
	* x x
	)

div

say (* x x)
say (+ x x)
make_square 4 \\s4
make_square 7 \\s7

say s4
say s7
say s4
say s7
)
)

div
eval_file "hello.fxl"
div
eval_file "utf8.fxl"
div
eval_file "beer.fxl"
div
eval_file "hailstone.fxl"

div
eval_str ~END
\x=(+ 33 48)
say ["x = " x]
~END

div
(
value
(
def "show" show;
std
)
\;
show "x"
show (+ 2 3)
)

div
(
value
(
def "say" say;
def "put" put;
def "nl" nl;
def "+" +;
def "round" round;
def "trunc" trunc;
def "abs" abs;
def "sqrt" sqrt;
def "exp" exp;
def "log" log;
def "sin" sin;
def "fred" (say "I am Fred.");
void
)
\;
say "hi"
fred
say (+ 42.8 -7.6)
say (+ 28 46.5)
say (+ 28 46.5)
say (+ 28 46.5)
say (round 14.8)
say (trunc 14.8)
say (abs 14.8)
say (sqrt 14.8)
say (exp 4.8)
say (log 4.8)
say (sin 4.8)
put "bye" nl
)

div
(
\x42.5=8.76
\42.5x=2.28
say (+ x42.5; + 42.5x; + 42.5; 0)
)

div
(
\x="1234567890123456"
# Now make a string with length 16*(2^20) = 16,777,216 bytes.
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
\x=(. x x)
put "length is " put (length x) nl
)

div
\x=42
say "Hello world."
put "x = " put x nl
say (+ x 5)
say (- x 5)
say (* x 5)
say (/ x 5)
say (/ x 0)

div
say (lt 2 3 "T" "F")
say (eq 2 2 "T" "F")
say (gt 3 2 "T" "F")
say (ge 3 4 "T" "F")
say (ge 3 3 "T" "F")
say (ge 3 2 "T" "F")
say (eq "x" "y" "T" "F")
say (eq "x" "x" "T" "F")
say (lt "x" "y" "T" "F")
say (lt "x" "x" "T" "F")
say (lt "y" "x" "T" "F")
say (lt "y" "" "T" "F")
say (lt "" "" "T" "F")
say (lt "" "x" "T" "F")
say (le "" "x" "T" "F")
say (le "x" "x" "T" "F")
say (le "x" "w" "T" "F")
say (ne "x" "x" "T" "F")
say (ne "x" "y" "T" "F")
say (ge "x" "x" "T" "F")
say (ge "x" "y" "T" "F")
say (ge "x" "w" "T" "F")
say (gt "x" "x" "T" "F")
say (gt "x" "y" "T" "F")
say (gt "x" "w" "T" "F")

div
say (+ -9.77 4.8)
say (- 211034.117654902 231.197659)
say (* 1.85 2.63)
say (round; * 1.85 2.63)
say (/ 130.08 2.63)
say (/ (* 2 (+ (- 100000000000.00 0.01) 0.02)) 2)
say (285)
say (round 125867.2)
say (round 7.2)
say (round -7.2)
say (round 7.8)
say (round -7.8)
say (trunc 7.2)
say (trunc -7.2)
say (trunc 7.8)
say (trunc -7.8)

# Test ceil
(
\try=(\x \y=(ceil x) say ["ceil "x" = "y])
\try=(\x try x try (neg x))
try 0
try 0.1
try 0.5
try 14.8
try (* 1.85 2.63)
try 125867.2
try 7.2
try 7.8
)

say (^ 10 4)
say (^ 2.71828182845905 1.09861228866811)  # (^ e (ln 3))
say (exp; log 3) # more exact

say (. "" "")
say (. "" "a")
say (. "a" "b")
say (. "a" "")
say (. "abcde" "fgh")

say (length "")
say (length "a")
say (length "abc")
say (length (. "ab" "c"))

div

show_list (null)
show_list [1 2]
show_list (cons 1; cons 2; null)

# Test rand.
(
# Show the first 5 items of a list.
\show=
	(\label\list
	say [label" :"]
	show_list (first 5 list)
	)

stream_get rand \\list_1
stream_get rand \\list_2

seed_rand 0.1964
show "list_1" list_1
show "list_2" list_2
show "list_1" list_1
show "list_2" list_2
)

div
\x=T say (is_bool x)
\x=F say (is_bool x)
\x=(T 1) say (is_bool x)
\x=(F 1) say (is_bool x)
\x=(T 1 2) say (is_num x)
\x=(F 1 2) say (is_num x)

div
(
\try=(\x say (is_list x))
try []
try ["a"]
try ["a" 3]
try [1]
try [1;2]
try null
try (cons 1 [])
div
try (null 1)
try cons
try (cons 1)
try T
try F
try 3
try ""
)

div
say (is_good 2)
say (is_good (say "hi"))
say (is_good [])
say (is_good void)
div
say (is_void 2)
say (is_void (say "hi"))
say (is_void [])
say (is_void void)
# If you apply a form to something else, it returns void.
say (is_void ( (\; f x) 3) )
# Evaluate a form.
(
\x=(value std; \; + 3 4)
say ["x = "(as_str x)]
)
# Evaluate a non-form.
(
\x=(value std; + 3 4)
say ["x = "(as_str x)]
)

# Test tuples
say "== tuples"
say_data (list_to_tuple; map (\x chr; + x 96); range 1 6)
(
\try=
	(\x
	\y=(list_to_tuple x)
	\z=(tuple_to_list y)
	say_data x
	say_data y
	say_data z
	nl
	)

try []
try ["a"]
try (cons "a" null)
try ["a" "b" "c"]
try ["a" "b"; cons "c" null]
try (cons "a"; I; I; cons "b" null)
try (cons 1; cons 2; null)
try ["a" "b"; I; I; cons "c"; I null]
# Test embedded once forms.
try
	(
	(\x append x x);
	[
	(put "(1)" "a")
	(\= put "(2)" I;I;"b")
	(put "(3)" "c")
	(\= put "(4)" "d")
	]
	)
)

div

say []
say [""]
say ["a"]
say ["a""b"]
say ["a""b"3]
say ["a""b"(/ 6 4)]
say ([] 4)
say (["a" "b"] 4)

(\x=(* 77 44) say ["x = " x])

(\x=(* 77 44) \y=(* 66 55)
say [["x = "x]", "["y = "y]]
)

say (cons "a")
say (cons "a" null)
say T
say F
say [T T F T F F]
say (T 1)
say (F 1)

(
\list=[(. "Hell" "o") " " (+ 4 5) NL "Bye" NL]
\list=(append list list)
\list=(append list list)
put list
)

(
# Test a function defined with UTF-8 characters.
\åabcüdef=say
åabcüdef "=="
åabcüdef ["x = " (+ 2 3)]
åabcüdef ["y = " (* 2 3)]
)

(
# Demonstrate the repetition of side effects.
div
\\talk=(say (^ (put "(L)" (+ 1 1)) (say "(R)" (- 8 5))))
talk
talk
talk
)

\\test_context=
(
\\case_1=
	(
	say "["
	say "== resolve"

	(
	\def=(\key\\val with key (say ["symbol "key] yield val))
	value
	(
	def "say" say;
	def "fred" (say "I am Fred.");
	def "wilma" (say "I am Wilma.");
	def "is_void" is_void;
	def "void" void;
	def "barney" (say "I am Barney.");
	void
	)
	\;
	say "== run"
	fred
	wilma
	say ["test void: " (is_void void)]
	barney
	)

	say "]"
	)

\\case_2=
	(
	say "["
	\form=(parse "say (+ 7 8)" "")

	say "Run in standard context."
	value std form

	say "Run in weird context."
	value
		(
		def "say" say;
		def "+" *;
		void
		)
		form

	say "]"
	)

\\case_3=
	(
	value std (\; yield; say "PING") \\run
	say "["
	run
	run
	run
	say "]"
	)

case_1
case_2
case_3
)

test_context

(
div
\\try=
(
(\=say "Let's parse.")
eval_file "hello.fxl"
)

try
try
try
)

(
div
\\try=
(
\source=
~~
\x say [x " " (* 3 x)]
~~

(\=say "Let's parse.")
eval_str source
)

try 5
try 7.2
try -1.3
)

\\test_file=
(
\tmp_name="tmp.txt"
\tmp_file=(path_under dir_local tmp_name)

\write_file=
	(\content
	\fh=(fopen tmp_file "w")
	fput fh content
	)

\show_chars=
	(\f
	\fh=(fopen tmp_file "r")
	@\\loop
	\ch=(fget fh)
	is_undef ch ();
	f ch
	loop
	)

\\remove_file=
	(
	\code=(remove tmp_file)
	say [(eq code 0 "Removed" "Could not remove") " " tmp_name]
	)

\\test_1=
	(
	div
	say ["Write " tmp_name ":"]
	write_file
~
Test data
here
üä 1≠0 包子
~
	say ["Read " tmp_name ":"]
	show_chars (\ch say ["ch " ch])
	remove_file
	)

\\test_2=
	(
	div
	write_file
	[
~
This goes to the file.
~
(say "This should go to stdout.")
~
This also goes to the file.
~
	]

	show_chars put
	remove_file
	)

# Here I test interleaved writes and reads to the same file, which acts like a
# queue.
\\test_3=
	(
	div

	\\open=(fopen tmp_file)
	\\fh_w=(\= open "w")
	\\fh_r=(\= open "r")

	\put=
		(\x
		say ["put " x]
		fput fh_w x
		fflush fh_w  # You must do this.
		)

	\\get=
		(
		\ch=(fget fh_r)
		say ["get " (is_undef ch ((clearerr fh_r) "void") ch)]
		)

	put "a"
	get get
	put "bc"
	get
	put "d"
	get get
	put "efg"
	get
	put "h"
	get get get get

	remove_file
	)

test_1
test_2
test_3
)

test_file

\\test_var=
(
# In this test I created a little "assembly language" where I hide all the var
# operations in one place.

# The "!" function creates a read and write pair.
\\!=(\v=var_new {(\x=(var_get v) {x}) (var_put v)})

\fib=
	(\max
	say ["The first " max " Fibonacci numbers:"]

	! \\n? \\n:
	! \\x? \\x:
	! \\y? \\y:

	n: 0
	x: 1
	y: 1

	@\\loop
	n? \n
	ge n max ();
	x? \x
	y? \y
	say x
	x: y
	y: (+ x y)
	n: (+ n 1)
	loop
	)

fib 16
fib 5
)

div
(
\v=var_new
\x=(var_get v)
var_put v x
say "Passed var test of 20150907."
)
test_var

div
eval_file "var.fxl"

# Test evaluation order.
(
(
div
put "("
\\x=(put "x=" 3)
put ")"
say x
say x
say x
)
(
div
put "("
\x=(put "x=" 3) # Force the evaluation.
put ")"
say x
say x
say x
)
(
div
\\x=(say "hi" 3)
\x=x # The effect only happens once.
\x=x
\x=x
)
)

# Test numeric formatting.
div
(
\try=
	(\n\sep\x
	say (format_num n sep x)
	say (format_num n sep (neg x))
	say (format_num n "" x)
	nl
	)

try 8 "," 123456.789012
try 7 "," 123456.789012
try 6 "," 123456.789012
try 2 "|" 123456.789012
try 5 "," 12345678.789012
try 8 "," .789012
try 0 "," 00.789012
try 0 "," 0
try 3 "," 0
try 7 "," 314.159
try 7 "," 0.159
try 3 "," 0.159265
)

(
div
\\talk=(say "Hi")
talk
talk
)

(
div
\\talk=(say "Hi")
\x=talk
\x=talk
)

(
div
\talk=(say "Hi")
talk
talk
)

(
\try=
	(\list
	div
	each list (\x put [x " "]) nl
	)
try (reverse ["a" "b" "c"])
try (reverse; range 1 5)
)

(
div
\indent=
	(@\\loop\n
	le n 0 ();
	put " ";
	loop (- n 1)
	)

\test_quote=
	(@\\loop\x\n
	le n 0 nl;
	\x=(fexl_quote x)
	\n=(- n 1)
	indent (* 3 n); say x
	loop x n
	)

test_quote "abc" 7
test_quote "ab~1c" 3
test_quote ~1 a"b"~2c~1 4
)

(
div
\x = ~ a & "b" 1<3~
say x
\x=(quote x)
say x
say (is_str x)
)

(
div
\list=["a" "b" "c"]
\try=(\n say [n" : "(default "(void)" (list_at list n))])
try -1
try 0
try 1
try 2
try 3
)

(
div

(
# Test drop buffer without getting its content.
\buf=buf_new
buf_put buf "x"
)

# Now test redirecting output to a buffer.
\result=
(
\buf=buf_new
\put=(\x buf_put buf; to_str x)
\\nl=(buf_put buf NL)
\say=(\x put x nl)
(
\\hello=(say "Hello")
hello
say ["line " 1]
say "line 2"
put ["line " 3] nl
)
buf_get buf
)

say "result:"
put result
)

(
div
# Here I test the existence of the flock_ and limit_ function calls, though I'm
# not yet testing their effects.

\fh=(fopen (path_under dir_local "hello.fxl") "r")
say (is_good fh)
say (is_good; flock_ex fh)
say (is_good; flock_sh fh)
say (is_good; flock_un fh)
say (is_good; flock_ex "foo")
fclose fh
is_undef fh (say "File handle is properly void after close.") ()

if F
(
limit_time 20
limit_memory 1000000
limit_stack 20000
# The following would test either out of memory or stack overflow.
#\list=(@\\list append list list)
#each list say
)
)

div
each (range 1 12)
	(\n
	say [(short_month_name n) " " (ym_num_days 2016 n) " " (long_month_name n)]
	)

(
# Try the various kinds of output functions.
div
\try=
(\label\do
say ["== "label]
put "["
do (. "abcde" "fg")
do (+ 1 2.2)
do (I T)
do F
do (\x\y y)
do [["" "A"] ["B" "C"] "D"]
say "]"
)

try "put" put
try "say" say
try "fput" (fput stdout)
try "fsay" (fsay stdout)
)

# Test comparison of file modification times.
(
\try=
	(\f1\f2
	\base=(path_under dir_base)
	say ["is_newer "f1" "f2" = "(is_newer (base f1) (base f2))]
	)

\try=
	(\f1\f2
	try f1 f2
	try f2 f1
	nl
	)

try "src/fexl.c" "bin/fexl"
try "src/test/a1.fxl" "missing"
try "src/test/a1.fxl" "src/test/a1.fxl"
try "missing" "missing"
)

# Test file types.
(
\try=
	(\path
	\q_path=(path_under dir_base path)
	\type=
		(
		is_file q_path "f";
		is_dir q_path "d";
		""
		)
	say ["path "(fexl_quote path)" type "(fexl_quote type)]
	)

try "src"
try "src/fexl.c"
try "x/y"
try ""
try "."
try "bin"
try "bin/fexl"
try "x"
)

sleep 0

say (oct "775")
say (hex "af01A")

(
\local=(path_under dir_local)
\mkdir=(\path mkdir (local path) (oct "755"))
\rmdir=(\path rmdir (local path))

\code=(mkdir "zzz")
say ["mkdir : "code]

\code=(rmdir "zzz")
say ["rmdir : "code]
)

(
run_test "trim_spaces";
\try=
	(\x
	say ["all "(as_str x)" = "(as_str (trim_spaces x))]
	say ["beg "(as_str x)" = "(as_str (trim_beg_spaces x))]
	say ["end "(as_str x)" = "(as_str (trim_end_spaces x))]
	nl
	)

try ""
try "a"
try "a   "
try "  ab"
try "abc"
try "   abc  "
try ""
try "   "
try "  abcd   "
)

\\test_eq_data=
(
say "= test_eq_data"

\try=
	(
	\eq_bool=(\x\y is_bool x (is_bool y (x y (not y)) F) F)

	\x\y\expect
	\result=(eq_data x y)
	eq_bool result expect ();

	\show=(\k\v say [k" = "(as_str v)])
	say "ERROR"
	show "x" x
	show "y" y
	show "expect" expect
	show "result" result
	nl
	)

\try_app=
	(\x
	\y=(x "a")
	try x y F
	)

show_benchmark;

try "a" "b"  F
try "a" "a"  T
try pi pi  T
try F F  T
try F T  F
try T F  F
try T T  T
try void 32  F
try void (I void)  T
try ["a" "b"] ["a"]  F
try ["a" ["b" "c"]] ["a" ["b" "c"]]  T
try {"a" {"b" "c"}} {"a" {"b" "c"}}  T
try {"a" {"b" "x"}} {"a" {"b" "c"}}  F
try {"a" {"b"}} {"a" {"b" "c"}}  F
try {} {}  T
try {} 3  F
try "a" (\x x)  F
try (\x x) {"a" "b"}  F
try (\x x) (\x\y x)  F

try (\x x) (\x x)  F
try stdin stdout F
try stdin stdin F

try_app T
try_app F
try_app null

try (cons "a"; cons "b"; null) ["a" "b"] T
)

test_eq_data

# Test filler after "\", which is allowed but not recommended.
(
\  x=1

\  # comment
   x=1
)

# Test some sequences with ";" tails.  This has always been allowed in lists
# as of version 26.24.0 is it also allowed in tuples.
(
\try=(\x say (as_str x))
# list
(
\x=["a" "b" "c"; cons "d"; cons "e"; null]
try x
try (list_to_tuple x)
nl
)
# tuple
(
\x={"a" "b" "c"; cons "d"; cons "e"; null}
try x
try (tuple_to_list x)
nl
)
# no initial terms
(
\x=[; cons "d"; cons "e"; null]
try x
try (list_to_tuple x)
nl
)
)

# Test closed form.
(
\form=(\; \x x)
say (is_closed form)
\f=(value void form)
say (f 2)
)

# Try parsing invalid source.
say (is_void (parse 33 ""))

# Test that {} is equivalent to I.
say ({} "x")

# Test expansion of tuple items.
(
\x={"a"; append ["b" "c"] ["d"]}
x \a\b\c\d
put "a = " put (as_str a) nl
put "b = " put (as_str b) nl
put "c = " put (as_str c) nl
put "d = " put (as_str d) nl
)

(
say "= test_compare"
\try=
	(\x\y
	compare x y (put "lt") (put "eq") (put "gt")
	say [" "(as_str x)" "(as_str y)]
	)

try 0 0
try 2 3
try 3 2
try -5 20
try 50 -5
try -6.3 -6.3
nl

try "" ""
try "" "a"
try "b" ""
try "a" "b"
try "a" "aa"
try "b" "a"
try "aa" "a"
try "aa" "aa"
nl
)
(
say_data;
sort
[
47.3
0.2
-5
22
36
12
]
)

(
# Test var_putf and var_getf
\v=var_new
var_putf v (say "Hello")
var_getf v \\hello
say "["
var_get v
hello
say "]"
)

(
# Test the legacy eval function.
eval
	(say "HI" + 2 3)
	(\\x say ["x = "x])
)
(
yield (put "(CALC)" + 2 3)
	(\\x
	say ["x = "x]
	)
)

div
(
# Test old problem with inline list expansion.
{"a"; () []} \x say ["x = "x]
)
nl
(
# Test evaluate list.
list_to_tuple (append ["a"] ["b" "c"]) \a\b\c
say ["a = "a]
say ["b = "b]
say ["c = "c]
)
nl
(
# Test malformed list tail.
\val=({"a"; 3} \x say ["x = "x])
say (is_undef val)
)

(
# Test evaluation of right side in get_key.
\cx=
[
{"a" (say "got a" 1)}
{"b" (say "got b" 2)}
]

\try=
	(\key
	\val=(: key cx)
	say [key" = "(as_str val)]
	)

try "a"
try "b"
try "c"
)

(
# Demonstrate holding onto a key directly when resolving a form.
value
(\key
eq key "say" (yield say);
eq key "message" (yield key);
void
)
\;
say message
say message
)

\#
Extra stuff not parsed.
