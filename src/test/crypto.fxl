# (repeat_str str n) Repeat str n times.
\repeat_str=
	(\str\n
	\buf=buf_new
	(@\loop\n
	le n 0 ();
	buf_put buf str
	\n=(- n 1)
	loop n
	) n
	buf_get buf
	)

\show_hex=
	(\bytes
	\bytes=bytes
	is_void bytes (say "void");
	say [(length bytes)":["(unpack bytes)"]"]
	)

\try_crypto_box_public=
	(\secret_key
	\public_key=(crypto_box_public secret_key)
	say "crypto_box_public"
	put "secret_key = " show_hex secret_key
	put "public_key = " show_hex public_key
	nl
	public_key
	)

\try_crypto_box_prepare=
	(\public_key\secret_key
	\key=(crypto_box_prepare public_key secret_key)
	say "crypto_box_prepare"
	put "public_key = " show_hex public_key
	put "secret_key = " show_hex secret_key
	put "key        = " show_hex key
	nl
	key
	)

\try_crypto_box_seal=
	(\plain_text\nonce\public_key\secret_key

	\key=(try_crypto_box_prepare public_key secret_key)
	\crypt_text=(crypto_box_seal plain_text nonce key)

	say "crypto_box_seal"
	put "plain_text = " show_hex plain_text
	put "nonce      = " show_hex nonce
	put "key        = " show_hex key
	put "crypt_text = " show_hex crypt_text
	nl
	crypt_text
	)

\try_crypto_box_open=
	(\crypt_text\nonce\public_key\secret_key

	\key=(try_crypto_box_prepare public_key secret_key)
	\plain_text=(crypto_box_open crypt_text nonce key)

	say "crypto_box_open"
	put "crypt_text = " show_hex crypt_text
	put "nonce      = " show_hex nonce
	put "key        = " show_hex key
	put "plain_text = " show_hex plain_text
	nl
	plain_text
	)

\try_crypto_sign_public=
	(
	\secret_key
	\public_key=(crypto_sign_public secret_key)
	say "crypto_sign_public"
	put "secret_key = " show_hex secret_key
	put "public_key = " show_hex public_key
	nl
	public_key
	)

\try_crypto_sign_seal=
	(\text\public_key\secret_key
	\signature=(crypto_sign_seal text public_key secret_key)
	say "crypto_sign_seal"
	put "text       = " show_hex text
	put "public_key = " show_hex public_key
	put "secret_key = " show_hex secret_key
	put "signature  = " show_hex signature
	nl
	signature
	)

\try_crypto_sign_open=
	(\text\public_key\signature
	\valid=(crypto_sign_open text public_key signature)
	say "crypto_sign_open"
	put "text       = " show_hex text
	put "public_key = " show_hex public_key
	put "signature  = " show_hex signature
	put "valid      = " say (as_str valid)
	nl
	valid
	)

# Disabling this for reproducibility.
if F
(
show_hex (random_bytes 16)
show_hex random_nonce
show_hex random_secret_key
)

\test_box==
(
say "[ test_box"
\secret_key_1=(pack
"236162636465666768696a6b6c6d6e6f707172737475767778797a0a23616263")
\public_key_1=(try_crypto_box_public secret_key_1)

\secret_key_2=(pack
"d236189ec7c5afdd8a6b0ea9d2ff65cf444a30f5ccfc058c3e735c9877236798")
\public_key_2=(try_crypto_box_public secret_key_2)

\nonce_1=(pack "6465666768696a6b6c6d6e6f707172737475767778797a0a")
\nonce_2=(pack "8356ad3e116d685dd4b6a321fcf1ab80acd4720e855f2b17")

# Test sending an authenticated message from A to B.
\test_send=
	(
	\plain_text\nonce
	\public_key_A\secret_key_A
	\public_key_B\secret_key_B

	\crypt_text=
		(try_crypto_box_seal plain_text nonce public_key_B secret_key_A)
	\new_plain_text=
		(try_crypto_box_open crypt_text nonce public_key_A secret_key_B)
	if (and (is_defined new_plain_text) (ne new_plain_text plain_text))
		(say "ERROR: Round trip failed!")
	)

(
say "= Test sending messages to self."
\try=
	(\plain_text
	test_send plain_text nonce_1
	public_key_1 secret_key_1
	public_key_1 secret_key_1
	)

try "Steffi is a good girl."
try ""
)

(
say "= Test sending messages between two parties."
\try=
	(\plain_text
	test_send plain_text nonce_1
	public_key_1 secret_key_1
	public_key_2 secret_key_2
	)

try "Steffi is a good girl."
try "abcdefghijklmnopqrstuvwxyz"
try ""
)

(
say "= Test zero key and nonce."
\try=
	(
	\secret_key=(pack
	"0000000000000000000000000000000000000000000000000000000000000000")

	\public_key=(try_crypto_box_public secret_key)

	\nonce=(pack "000000000000000000000000000000000000000000000000")

	\plain_text
	test_send plain_text nonce
	public_key secret_key
	public_key secret_key
	)

try "abcdefghijklmnopqrstuvwxyz"
try ""
)

(
say "= Test erroneous input."
\try=
	(\secret_key\nonce\plain_text

	\secret_key=(pack secret_key)
	\nonce=(pack nonce)

	\public_key=(try_crypto_box_public secret_key)

	test_send plain_text nonce
	public_key secret_key
	public_key secret_key
	)

try
"000000000000000000000000000000000000000000000000000000000000000" # too short
"000000000000000000000000000000000000000000000000"
"abcdefghijklmnopqrstuvwxyz"

try
"" # too short
""
""
)

(
say "= Test making signing keys."
\try=
	(\secret_key
	\secret_key=(pack secret_key)
	\public_key=(try_crypto_sign_public secret_key)
	)
try "236162636465666768696a6b6c6d6e6f707172737475767778797a0a23205e20"
try "0000000000000000000000000000000000000000000000000000000000000000"
try "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
try "a0b2"
)

(
say "= Test specific cases of crypto_box_open."
\try=
	(\crypt_text\nonce\public_key\secret_key

	\crypt_text=(pack crypt_text)
	\nonce=(pack nonce)
	\public_key=(pack public_key)
	\secret_key=(pack secret_key)

	\plain_text=(try_crypto_box_open crypt_text nonce public_key secret_key)
	)
try
"b9d3961d2b57f14e1d235a5065fd5e102021f6d6ef40f45341a60bff5cebaf4b31e53962aa0b"
"6465666768696a6b6c6d6e6f707172737475767778797a0a"
"d07a6e764d2e78523e849b35f348458e4c3445676b705ee9c3d5dc56d6401636"
"236162636465666768696a6b6c6d6e6f707172737475767778797a0a23616263"

# Try truncated crypt_text.
try
"b9d396"
"6465666768696a6b6c6d6e6f707172737475767778797a0a"
"d07a6e764d2e78523e849b35f348458e4c3445676b705ee9c3d5dc56d6401636"
"236162636465666768696a6b6c6d6e6f707172737475767778797a0a23616263"
)
say "]"
)

\test_hash==
(
say "[ test_hash"
# Try SHA-512 hash.
# Reference: https://www.di-mgt.com.au/sha_testvectors.html
(
\try=
	(\text
	\hash=(crypto_hash text)
	say "crypto_hash"
	put "text = " show_hex text
	put "hash = " show_hex hash
	nl
	)

try "abc"
try ""
try "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
try "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"

(
# Test a million letter "a".
\text=(repeat_str "a" 1000000)
\hash=(crypto_hash text)
say "crypto_hash"
put "text = " say "(1,000,000 'a')"
put "hash = " show_hex hash
nl
)

if F
(
# Test the extremely-long message.
# This takes about 40 seconds.
\text=(repeat_str
"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno" 16777216)
\hash=(crypto_hash text)
say "crypto_hash"
put "text = " say "(the extremely-long message)"
put "hash = " show_hex hash
nl

# Output is:
#crypto_hash
#text = (the extremely-long message)
#hash = 64:[b47c933421ea2db149ad6e10fce6c7f93d0752380180ffd7f4629a712134831d77be6091b819ed352c2967a2e2d4fa5050723c9630691f1a05a7281dbe6c1086]
)

)

say "]"
)

\test_sign==
(
say "[ test_sign"
(
say "= Test seal and open."
\try=
	(\secret_key\text
	\secret_key=(pack secret_key)
	\public_key=(crypto_sign_public secret_key)
	\signature=(try_crypto_sign_seal text public_key secret_key)
	\valid=(try_crypto_sign_open text public_key signature)
	)

try "236162636465666768696a6b6c6d6e6f707172737475767778797a0a23205e20"
"Steffi is a good girl."

try "236162636465666768696a6b6c6d6e6f707172737475767778797a0a23205e20"
"abcd"

try "236162636465666768696a6b6c6d6e6f707172737475767778797a0a23205e20"
""

try "0000000000000000000000000000000000000000000000000000000000000000"
(pack "ffff")

try "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
(pack "0000")
)

(
say "= Test specific cases of crypto_sign_seal."
\try=
	(\text\public_key\secret_key
	\text=(pack text)
	\public_key=(pack public_key)
	\secret_key=(pack secret_key)
	\signature=(try_crypto_sign_seal text public_key secret_key)
	\valid=(try_crypto_sign_open text public_key signature)
	)

say "== Good."
try
"537465666669206973206120676f6f64206769726c2e"
"c34ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"236162636465666768696a6b6c6d6e6f707172737475767778797a0a23205e20"

say "== Good."
try
"537465666669206973206120676f6f64206769726c2e"
"3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29"
"0000000000000000000000000000000000000000000000000000000000000000"

say "== Mismatched public and secret key"
try
"537465666669206973206120676f6f64206769726c2e"
"3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29"
"236162636465666768696a6b6c6d6e6f707172737475767778797a0a23205e20"
)

(
say "= Test specific cases of crypto_sign_open."
\try=
	(\text\public_key\signature
	\text=(pack text)
	\public_key=(pack public_key)
	\signature=(pack signature)
	\valid=(try_crypto_sign_open text public_key signature)
	)

say "== Good"
try
"537465666669206973206120676f6f64206769726c2e"
"c34ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"7de154f364ed7fa959ed814cd23d557901f6a581931399cdd415ff55cdad9b94da46503cc58aeac9f8b5f33ec5f944327356ba1c6ee2313e951d781c6fe1040a"

say "== Wrong text"
try
"637465666669206973206120676f6f64206769726c2e"
"c34ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"7de154f364ed7fa959ed814cd23d557901f6a581931399cdd415ff55cdad9b94da46503cc58aeac9f8b5f33ec5f944327356ba1c6ee2313e951d781c6fe1040a"

say "== Wrong public key"
try
"537465666669206973206120676f6f64206769726c2e"
"d34ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"7de154f364ed7fa959ed814cd23d557901f6a581931399cdd415ff55cdad9b94da46503cc58aeac9f8b5f33ec5f944327356ba1c6ee2313e951d781c6fe1040a"

say "== Wrong signature"
try
"537465666669206973206120676f6f64206769726c2e"
"c34ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"7de154f364ed7fa959ed814cd23d557901f6a581931399cdd415ff55cdad9b94da46503cc58aeac9f8b5f33ec5f944327356ba1c6ee2313e951d781c6fe1040b"

say "== Wrong size public key"
try
"537465666669206973206120676f6f64206769726c2e"
"4ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"7de154f364ed7fa959ed814cd23d557901f6a581931399cdd415ff55cdad9b94da46503cc58aeac9f8b5f33ec5f944327356ba1c6ee2313e951d781c6fe1040a"

say "== Wrong size signature"
try
"537465666669206973206120676f6f64206769726c2e"
"c34ceaf901d5010541e4daf3958ee69a04a5064335709d33377204d60a2a0872"
"e154f364ed7fa959ed814cd23d557901f6a581931399cdd415ff55cdad9b94da46503cc58aeac9f8b5f33ec5f944327356ba1c6ee2313e951d781c6fe1040a"
)

say "]"
)

test_box
test_sign
test_hash
