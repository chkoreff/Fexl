# Demonstrate the use of vars to maintain an evolving state.
\=(use "test/lib.fxl")
\=(use "test/common.fxl")

## Here is the "API".

\v_list==var_new
\v_count==var_new
\v_map==var_new

var_put v_list []
var_put v_count 0
var_put v_map void

\update=
	(\v\f
	\x==(var_get v)
	var_put v (f x)
	)

\push=
	(\v\x
	update v (cons x)
	)

\pairs=(var_get v_list)
\count=(var_get v_count)

\update_map=
	(\v\key\val
	update v
		(\map
		\x
		eq x key val;
		map x
		)
	)

\add=
	(\v\n
	update v
		(\x
		\y=(+ n x)
		say ["  add: " x " => " y]
		y
		)
	)

\set=
	(\key\val
	say ["set " key " = " val]
	push v_list {key val}
	add v_count 1
	update_map v_map key val
	)

\get=(var_get v_map)

## Now do some operations.

\show_pairs=
(
\show_pair=(\pair pair \key\val say ["{ " key " " val " }"])
say "["
each pairs show_pair
say "]"
)

\show=
	(\key
	say ["get " key " = " (get key)]
	)

(
\set_xyz=
(
set "x" "3"
set "y" "4"
set "z" "5"
)

\set_q=
(
set "q" "0"
)

set_xyz
set_xyz
set_q
show_pairs
say ["count = " count]
show "x"
show "y"
show "z"
show "q"
show "r"
say "bye"
)
