# Compile an index into C code.
\cx_index=(value std; use "lib/index/index.fxl")
\cx_render=(value std; use "lib/render/base.fxl")
\cx_render_C=(value (:: cx_render; std); use "lib/render/C.fxl")

value
(
:: cx_render_C;
:: cx_render;
:: cx_index;
std
)
\;

# Process all the rows in an index.
\do_rows=
	(@\\do_rows \checked_bound\pos\rows
	rows () \row\rows
	row \is_leaf\key\val

	\\check_ch=
		(
		\ch=(slice key pos 1)
		checked_bound () (say ["if (n <= "(num_str pos)") return 0;"])
		say ["if (x["(num_str pos)"] == '"ch"')"]
		)

	\len=(length key)

	is_leaf
		(
		\\do_strncmp=
			(
			say ["if (n == "(num_str len)" && strncmp(x,"
				(fexl_quote key)",n) == 0)"]
			indent (say ["return "(fexl_quote val)";"])
			)

		lt pos len
			(
			check_ch
			scope
				(
				do_strncmp
				say "return 0;"
				)
			do_rows T pos rows
			);
		eq len 0
			(
			# Optimize null key.
			say ["if (n == "(num_str pos)")"]
			indent (say ["return "(fexl_quote val)";"])
			do_rows T pos rows
			)
			(
			do_strncmp
			do_rows checked_bound pos rows
			)
		)
		(
		check_ch
		scope
			(
			do_rows F len val
			say "return 0;"
			)
		do_rows T pos rows
		)
	)

# (compile_index index)
# Return C code which implements the index.
\compile_index=
	(\index
	say "const char *lookup(const char *x, unsigned long n)"
	scope
		(
		index
			(
			# Special case for empty index.
			say "(void)x;"
			say "(void)n;"
			)
			(\_\_
			do_rows F 0 index
			)
		say "return 0;"
		)
	)

# (index_put_pairs pairs index)
# Put all the {key val} pairs into the index.
\index_put_pairs=
	(@\\loop\pairs\index
	pairs index \pair\pairs
	pair \key\val
	\index=(index_put key val index)
	loop pairs index
	)

# (compile_pairs pairs)
# Return C code which looks up the key value pairs.
\compile_pairs=
	(\pairs
	\index=(index_put_pairs pairs [])
	compile_index index
	)

def "compile_index" compile_index;
def "index_put_pairs" index_put_pairs;
def "compile_pairs" compile_pairs;
void
