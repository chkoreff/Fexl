# Compile an index into C code.
\cx_index=(value; std; use "lib/index/index.fxl")
\cx_render=(value; std; use "lib/render/base.fxl")
\cx_render_C=(value; std; cx_render; use "lib/render/C.fxl")

value;
std;
cx_index;
cx_render;
cx_render_C;
\;

# Process all the rows in an index.
\do_rows=
	(@\do_rows \checked_bound\pos\rows\next
	rows next \row\rows
	row \is_leaf\key\val

	\check_ch==
		(\next
		\ch=(slice key pos 1)
		checked_bound () (say ["if (n <= "(num_str pos)") return 0;"]);
		say ["if (x["(num_str pos)"] == '"ch"')"];
		next
		)

	\len=(length key)

	is_leaf
		(
		\do_strncmp==
			(\next
			say ["if (n == "(num_str len)" && strncmp(x,"
				(fexl_quote key)",n) == 0)"];
			indent
				(
				say ["return "(fexl_quote val)";"];
				end
				);
			next
			)

		lt pos len
			(
			check_ch;
			scope
				(\next
				do_strncmp;
				say "return 0;";
				next
				);
			do_rows T pos rows;
			next
			);
		eq len 0
			(
			# Optimize null key.
			say ["if (n == "(num_str pos)")"];
			indent
				(
				say ["return "(fexl_quote val)";"];
				end
				);
			do_rows T pos rows;
			next
			)
			(
			do_strncmp;
			do_rows checked_bound pos rows;
			next
			)
		)
		(
		check_ch;
		scope
			(\next
			do_rows F len val;
			say "return 0;";
			next
			);
		do_rows T pos rows;
		next
		)
	)

\render_index==
	(\index
	say "const char *lookup(const char *x, unsigned long n)";
	scope
		(\next
		(\return
		index
			(
			# Special case for empty index.
			say "(void)x;";
			say "(void)n;";
			return
			)
			(\_\_
			do_rows F 0 index;
			return
			)
		);
		say "return 0;";
		next
		);
	end
	)

# (compile_index index)
# Return C code which implements the index.
\compile_index==
	(\index
	render_index index ""
	)

# (index_put_pairs pairs index)
# Put all the {key val} pairs into the index.
\index_put_pairs=
	(@\loop\pairs\index
	pairs index \pair\pairs
	pair \key\val
	\index=(index_put key val index)
	loop pairs index
	)

# (compile_pairs pairs)
# Return C code which looks up the key value pairs.
\compile_pairs==
	(\pairs
	\index=(index_put_pairs pairs [])
	compile_index index
	)

\form
def "compile_index" compile_index;
def "index_put_pairs" index_put_pairs;
def "compile_pairs" compile_pairs;
form
