# Compile an index into C code.

# Enclose content in an indented block.
\enclose==
	(\tab\content
	\tab=(. tab TAB)
	[
	tab "{" NL
	(content tab)
	tab "}" NL
	]
	)

# Process all the rows in an index.
\do_rows=
	(@\do_rows\checked_bound\tab\pos\rows
	rows [] \row\rows
	row \is_leaf\key\val

	\check_ch==
		(
		\ch=(slice key pos 1)
		[
		(checked_bound [] [tab "if (n <= "(num_str pos)") return 0;" NL])
		tab "if (x["(num_str pos)"] == '"ch"')" NL
		]
		)

	\len=(length key)

	is_leaf
		(
		\do_strncmp==
			(\tab
			[
			tab "if (n == "(num_str len)" && strncmp(x,"
				(fexl_quote key)",n) == 0)" NL
			tab TAB "return "(fexl_quote val)";" NL
			]
			)

		lt pos len
			[
			check_ch
			(enclose tab \tab
				[
				(do_strncmp tab)
				tab "return 0;" NL
				]
			)
			; do_rows T tab pos rows
			];
		eq len 0
			[
			# Optimize null key.
			tab "if (n == "(num_str pos)")" NL
			tab TAB "return "(fexl_quote val)";" NL
			; do_rows T tab pos rows
			]
			[
			(do_strncmp tab)
			; do_rows checked_bound tab pos rows
			]
		)
		(
		[
		check_ch
		(enclose tab \tab
			[
			(do_rows F tab len val)
			tab "return 0;" NL
			]
		)
		; do_rows T tab pos rows
		]
		)
	)

# (compile_index index)
# Return C code which implements the index.
\compile_index==
	(\index
	\tab==""
	[
	"const char *lookup(const char *x, unsigned long n)" NL
	(enclose tab \tab
		[
		(
		index
			[
			# Special case for empty index.
			tab "(void)x;" NL
			tab "(void)n;" NL
			]
			(\_\_
			do_rows F tab 0 index
			)
		)
		tab "return 0;" NL
		]
	)
	]
	)

# (index_put_pairs pairs index)
# Put all the {key val} pairs into the index.
\index_put_pairs=
	(@\loop\pairs\index
	pairs index \pair\pairs
	pair \key\val
	\index=(index_put key val index)
	loop pairs index
	)

# (compile_pairs pairs)
# Return C code which looks up the key value pairs.
\compile_pairs==
	(\pairs
	\index=(index_put_pairs pairs [])
	compile_index index
	)

\form
def "compile_index" compile_index;
def "index_put_pairs" index_put_pairs;
def "compile_pairs" compile_pairs;
form
