# INDEX OPERATIONS
#
# An index is a highly efficient structure for mapping string keys to arbitrary
# values.  It uses the longest common prefix of keys to narrow the search
# quickly.
#
# INDEX REPRESENTATION
#
# An index is a list of triples {is_leaf key val} ordered by key.
#
# The is_leaf is boolean, and the key is a string.
#
# If is_leaf is true, the val is the arbitrary value associated with this key.
#
# If is_leaf is false, the val is the index of all entries that start with this
# key.  The key is the longest prefix shared by all entries in the val index.

# (index_get key index)
# Return the value associated with key, or void if not found.
\index_get=
	(\new_key
	\len_new_key=(length new_key)
	(@\\loop\pos\index
	index void \row\tail
	row \is_leaf\old_key\val

	compare_at pos new_key old_key
		void
		(
		is_leaf
			(eq old_key new_key val void)
			(
			\len_old_key=(length old_key)
			lt len_new_key len_old_key
				void
				(loop len_old_key val)
			)
		)
		(loop pos tail)
	)
	0
	)

# (index_put key val index)
# Return a new index with key mapped to val.
\index_put=
	(\new_key\new_val
	(@\\loop\pos\index

	index [{T new_key new_val}] \row\tail
	row \is_leaf\old_key\old_val

	compare_at pos new_key old_key
		[{T new_key new_val}; index]
		(
		\len_common=(length_common new_key old_key)
		eq (length old_key) len_common
			(
			# old_key is a prefix of new_key
			is_leaf
				(
				eq (length new_key) len_common
					# old_key is identical to new_key
					[{T old_key new_val}; tail]
					(
					# old_key is a proper prefix of new_key
					\child=(loop len_common [row])
					[{F old_key child}; tail]
					)
				)
				(
				\child=(loop len_common old_val)
				[{F old_key child}; tail]
				)
			)
			(
			eq (length new_key) len_common
				(
				# new_key is a proper prefix of old_key
				\child=(loop len_common [row])
				[{F new_key child}; tail]
				)
				(
				# old_key and new_key share a common proper prefix
				\prefix=(slice old_key 0 len_common)
				\child=(loop len_common [row])
				[{F prefix child}; tail]
				)
			)
		)
		(
		\tail=(loop pos tail)
		[row;tail]
		)
	)
	0
	)

# (index_del key index)
# Return a new index with key deleted.
\index_del=
	(\new_key
	(@\\loop\pos\index

	index [] \row\tail
	row \is_leaf\old_key\old_val

	compare_at pos new_key old_key
		index
		(
		\len_common=(length_common new_key old_key)
		eq (length old_key) len_common
			(
			# old_key is a prefix of new_key
			is_leaf
				(
				eq (length new_key) len_common
					# old_key is identical to new_key
					tail
					# old_key is a proper prefix of new_key
					index
				)
				(
				\child=(loop len_common old_val)
				# Detect child with a single row as a special case.
				child
					tail
					(\child_row\child_tail
					child_tail
						[child_row;tail]
						(\_\_
						[{F old_key child}; tail]
						)
					)
				)
			)
			index
		)
		(
		\tail=(loop pos tail)
		[row;tail]
		)
	)
	0
	)

# (index_pairs index)
# Return the list of {key val} pairs in the index.
\index_pairs=
	(@\\loop\index
	index [] \row\tail
	row \is_leaf\key\val
	is_leaf
		[{key val}; loop tail]
		(append (loop val) (loop tail))
	)

\form
def "index_get" index_get;
def "index_put" index_put;
def "index_del" index_del;
def "index_pairs" index_pairs;
form
