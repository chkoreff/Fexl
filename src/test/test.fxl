#
\div==(say "==")
\show_list=(\xs say "[" (each xs say) say "]")

\run_test=
	(\label\code
	say ["[ "label]
	code
	say "]"
	)

\run_benchmark=
	(\show\f
	fexl_benchmark f \val\steps\bytes
	show ["steps "steps" bytes "bytes]
	val
	)

\do_benchmark=(run_benchmark trace)
\show_benchmark=(run_benchmark say)

\show_str=
	(\text
	is_void text (say "void");
	say [(length text)":"(as_str text)]
	)

\show_hex=
	(\bytes
	\bytes=bytes
	is_void bytes (say "void");
	say [(length bytes)":["(unpack bytes)"]"]
	)

# Cache a recursive function.
\cache_loop==
	(
	\var=var_new
	\fn
	@\loop\x
	\x=x
	\val=(var_get var x)
	is_defined val val;

	\val=(fn loop x)
	var_put var (with x val; var_get var)
	val
	)

define "div" div;
define "show_list" show_list;
define "run_test" run_test;
define "do_benchmark" do_benchmark;
define "show_benchmark" show_benchmark;
define "show_str" show_str;
define "show_hex" show_hex;
define "cache_loop" cache_loop;
standard
