#
value;
std;
(value; std; use "test.fxl");
\;

show_benchmark;

# (tower f n x) is the result of applying f to x n times.
\tower=
	(\f @\\loop\n\x
	le n 0 x;
	loop (- n 1) (f x)
	)

# Test restricted evaluation by defining only the necessary functions.
value;
def "append" append;
def "show_list" show_list;
def "sort" sort;
def "tower" tower;
def "unique" unique;
\;
# Here I test the sort.

# A list of 30 random words from diceware.com.
\list=
	[
	"when"
	"scud"
	"gibby"
	"babel"
	"skip"
	"sham"
	"rug"
	"expel"
	"grout"
	"perky"
	"jo"
	"piece"
	"ro"
	"haw"
	"revel"
	"qqqq"
	"bow"
	"blotch"
	"flam"
	"than"
	"subtly"
	"jess"
	"angie"
	"dewar"
	"polka"
	"ur"
	"eb"
	"am"
	"amra"
	"crown"
	]

# The number of times to double the list for the unique sort.
\N=
	(
	# NOTE: If you time these you'll see that the sort time is O(N).
	#7  # 3840 words
	#9  # 15360 words
	#10 # 30720 words
	11 # 61440 words
	#12 # 122880 words
	#13 # 245760 words
	#14 # 491520 words
	#15 # 983040 words
	)

# (exp_list n xs) Make 2^n copies of list xs.
\exp_list=(tower (\x append x x))

\show=show_list

# Make two copies of the list and sort it.
show (sort; exp_list 1 list)

# Make 2^N copies of the list and show only the unique entries.
show (unique; exp_list N list)
