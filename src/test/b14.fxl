# NOTE If you fopen with "a+", you cannot seek, and output is always at end of
# file.

\show_base_dir=
	(\path
	say ["directory "path]
	\path=(path_under dir_base path)
	# Exclude hidden files.
	\names=(sort; filter (\x not; starts_with "." x); dir_names path)
	say "["
	each names say
	say "]"
	)

# NOTE: There's a bug in /bin/ls on my PopOS system.  The man page says:
# "Sort entries alphabetically if none of -cftuvSUX nor --sort is specified."
#
# Consequently if I run "/bin/ls -1 -a src/lib" I would expect the entries to
# be sorted alphabetically.  However, on my machine I see this within the
# output:
#
#   read_csv.fxl
#   read.fxl
#   read_ssv.fxl
#
# Clearly the "read.fxl" should appear first because '.' is less than '_'.
# So /bin/ls is not strictly doing what the man page says above.  Most of the
# entries are sorted, but "read.fxl" is out of order.
#
# I could force a sort here, but for now I will just document the case, change
# the reference output to its true expected value, and live with this small
# break on my own system.  I'll consider it correctness test for /bin/ls.

\\test_ls=
	(
	\path="src/lib"
	\path=(path_under dir_base path)
	\cmd=
		[
		(put "(1)" "/bin/ls")
		;
		cons (put "(2)" I;I;"-1");
		[
		(put "(3)" "-a")
		#(\x x) # Test bad arg to exec.
		(put "(4)" path)
		; 33 # Test non-list tail.
		]
		]
	run_program cmd "" \out\err\status
	put out
	put err
	)

\demo_seek=
	(\path
	\path=(path_under dir_local path)

	\fh=
		(
		\fh=(mkfile path (oct "664")) # Create and open the file atomically.
		is_good fh (say ["Created "path] fh);
		\fh=(fopen path "r+") # Open the existing file.
		is_good fh (say ["Opened "path] fh);
		error ["Could not create or open "path]
		)

	flock_ex fh

	\show_pos=
		(\label
		say [label" (pos "(ftell fh)")"]
		)

	\seek=
		(\type\pos
		\fn=
			(
			eq type "set" fseek_set;
			eq type "cur" fseek_cur;
			eq type "end" fseek_end;
			void
			)
		\name=["seek_"type]
		\code=(fn fh pos)
		if (eq code -1) (error [name" failed"])
		show_pos [name" "pos]
		)

	\seek_set=(seek "set")
	\seek_cur=(seek "cur")
	\seek_end=(seek "end")

	\truncate=
		(\size
		\code=(ftruncate fh size)
		\name="truncate"
		if (eq code -1) (error [name" failed"])
		show_pos [name" "size]
		)

	\write=
		(\str
		fput fh str
		show_pos ["write "(length str)" bytes "(fexl_quote str)]
		)

	\read=
		(\size
		\str=(fread fh size)
		show_pos ["read "(length str)" bytes "(fexl_quote str)]
		)

	\sleep=
		(\n
		put ["sleep "n" ..."] fflush stdout
		sleep n
		nl
		)

	\form
	value
		(
		std;
		def "show_pos" show_pos;
		def "seek_set" seek_set;
		def "seek_cur" seek_cur;
		def "seek_end" seek_end;
		def "truncate" truncate;
		def "write" write;
		def "read" read;
		def "sleep" sleep;
		form
		)
	\code=(remove path)
	say [(eq code 0 "Removed" "Could not remove")" "path]
	fclose fh
	)

(
show_base_dir "src/lib"
#show_base_dir "src/test"
#show_base_dir "src"
test_ls # Test fflush in type_exec.
)

(
demo_seek "vector" \;
show_pos "open"
seek_set 0
truncate 100
seek_set 10
write "abcdefghijklmnopqrstuvwxyz"
if F (sleep 5) # Use this to test locking.
seek_cur -3
write "XYZ"
seek_end -20
write "12345"
seek_set 10
read 16
read 0
read 10
seek_end -3
write "ABC"
seek_end -3
read 10
)

# Test the flook and slook functions.
\\try_look=
(
\run=
(\\get\\look
get
get
look
look
get
get
look
get
look
look
get
get
get
look
)

\try=
	(\\get\\look\\in

	\\get =(\ch=(get in)  say ["get "ch])
	\\look=(\ch=(look in) say ["at  "ch])

	run get look
	)

\\try_file=
	(
	say "= file"
	\source=(path_under dir_base "src/test/data.txt")

	\fh=(
		\fh=(fopen source "r")
		if (is_undef fh) (error ["Could not open "source])
		fh
		)

	try fgetc flook fh
	)

\\try_str=
	(
	say "= str"
	\str="#abcdefghijklmnopqrstuvwxyz"
	\in=(readstr str)
	try sgetc slook in
	)

try_file
try_str
)

try_look
