# Test assoc list.
evaluate
(
use_lib "indent.fxl";
use_lib "assoc.fxl";
standard
) \;

\add_random_keys=
	(@\loop\count\seed\obj
	le count 0 obj;
	\hash=(crypto_hash seed)
	\key=(unpack; slice hash 0 8)
	\val=(unpack; slice hash 32 8)
	#\obj=(put_key key val obj)
	\obj=(push_key key val obj)
	\count=(- count 1)
	loop count hash obj
	)

\obj=(add_random_keys 8192 "abcd" [])
\obj=(sort_pairs obj)

(
\key="7d13f23fa2b9a6fd"
\val=(get_key key obj)
say_data {key val}
\obj=(put_key key "ffff" obj)
\val=(get_key key obj)
say_data {key val}
\obj=(update_key key (. "aaaa") obj)
\val=(get_key key obj)
say_data {key val}
)

(
shift obj \pair\_
put "first = "
say_data pair
)

(
shift (reverse obj) \pair\_
put "last  = "
say_data pair
)

(
# Test group items by lower-case.
say "= group_items"
\xs=["A" "b" "c" "b" "a" "a" "a" "B" "c" "d" "C" "b" "a" "a"]
say ["xs = "(as_str xs)]
\ys=(group_items lc xs)
say ["ys = "(as_str ys)]
)

(
say "= merge_keys"
# Test merge_keys.
\xs=[{"a" 1} {"b" 2} {"d" 4} {"g" 7}]
\ys=[{"a" -1} {"c" -3} {"d" -4} {"e" -5} {"f" -6}]
merge_keys (\x\y {x y}) xs ys \L\M\R
say ["xs = "(as_str xs)]
say ["ys = "(as_str ys)]
say ["L  = "(as_str L)]
say ["M  = "(as_str M)]
say ["R  = "(as_str R)]
)
