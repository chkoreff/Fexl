#use_new_syntax
# Demonstrate a technique for loading modules once on demand by putting the
# dependency graph in one place.

# Simulated file system
\use=
(\name
say ["** use "name]

eq name "util.fxl"
(\;
\check_sym=
	(\sym
	\\form=(use_base; parse sym "")
	say ["defined "sym" = "(is_closed form)]
	)

\form
def "say" (\x say [": "x]);
def "hello" (say "Hello.");
def "check_sym" check_sym;
form
);

eq name "flintstones.fxl"
(\;
say "(in flintstones)"
put "flintstones says: "hello

# Ensure that dangerous functions are not defined.
check_sym "remove"
check_sym "use"
check_sym "std"

\fred=(say "I am Fred.")
\wilma=(say "I am Wilma.")
\barney=(say "I am Barney.")
\betty=(say "I am Betty.")

\form
def "fred" fred;
def "wilma" wilma;
def "barney" barney;
def "betty" betty;
form
);

eq name "main.fxl"
(\;
put "main says: " hello
say "Meet the Flintstones."
fred
wilma
barney
betty
42
);

error ["Could not open source file "name]
)

show_benchmark;

# Build the dependency graph.

# Run in a highly restrictive context.
\use_base=
	(\form
	def "say" say;
	def "put" put;
	def "if" if;
	def "T" T;
	def "F" F;
	def "def" def;
	def "parse" parse;
	def "is_closed" is_closed;
	form
	)

\use_util=
	(\=
	value;
	use_base;
	def "use_base" use_base;
	use "util.fxl"
	)

\use_flintstones=
	(\=
	value;
	use_base;
	use_util;
	use "flintstones.fxl"
	)

\use_main=
	(
	value;
	use_base;
	use_flintstones;
	use_util;
	use "main.fxl"
	)

\try=
	(
	say "==============="
	\\x=use_main
	say ["x = "x]
	)

try
try
